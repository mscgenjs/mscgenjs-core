// @generated by Peggy 4.0.3.
//
// https://peggyjs.org/
(function (root, factory) {
	if (typeof define === "function" && define.amd) {
		define(["./parserHelpers"], factory);
	} else if (typeof module === "object" && module.exports) {
		module.exports = factory(require("./parserHelpers"));
	}
})(this, function (parserHelpers) {
	"use strict";

	function peg$subclass(child, parent) {
		function C() {
			this.constructor = child;
		}
		C.prototype = parent.prototype;
		child.prototype = new C();
	}

	function peg$SyntaxError(message, expected, found, location) {
		var self = Error.call(this, message);
		// istanbul ignore next Check is a necessary evil to support older environments
		if (Object.setPrototypeOf) {
			Object.setPrototypeOf(self, peg$SyntaxError.prototype);
		}
		self.expected = expected;
		self.found = found;
		self.location = location;
		self.name = "SyntaxError";
		return self;
	}

	peg$subclass(peg$SyntaxError, Error);

	function peg$padEnd(str, targetLength, padString) {
		padString = padString || " ";
		if (str.length > targetLength) {
			return str;
		}
		targetLength -= str.length;
		padString += padString.repeat(targetLength);
		return str + padString.slice(0, targetLength);
	}

	peg$SyntaxError.prototype.format = function (sources) {
		var str = "Error: " + this.message;
		if (this.location) {
			var src = null;
			var k;
			for (k = 0; k < sources.length; k++) {
				if (sources[k].source === this.location.source) {
					src = sources[k].text.split(/\r\n|\n|\r/g);
					break;
				}
			}
			var s = this.location.start;
			var offset_s =
				this.location.source &&
				typeof this.location.source.offset === "function"
					? this.location.source.offset(s)
					: s;
			var loc =
				this.location.source + ":" + offset_s.line + ":" + offset_s.column;
			if (src) {
				var e = this.location.end;
				var filler = peg$padEnd("", offset_s.line.toString().length, " ");
				var line = src[s.line - 1];
				var last = s.line === e.line ? e.column : line.length + 1;
				var hatLen = last - s.column || 1;
				str +=
					"\n --> " +
					loc +
					"\n" +
					filler +
					" |\n" +
					offset_s.line +
					" | " +
					line +
					"\n" +
					filler +
					" | " +
					peg$padEnd("", s.column - 1, " ") +
					peg$padEnd("", hatLen, "^");
			} else {
				str += "\n at " + loc;
			}
		}
		return str;
	};

	peg$SyntaxError.buildMessage = function (expected, found) {
		var DESCRIBE_EXPECTATION_FNS = {
			literal: function (expectation) {
				return '"' + literalEscape(expectation.text) + '"';
			},

			class: function (expectation) {
				var escapedParts = expectation.parts.map(function (part) {
					return Array.isArray(part)
						? classEscape(part[0]) + "-" + classEscape(part[1])
						: classEscape(part);
				});

				return (
					"[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]"
				);
			},

			any: function () {
				return "any character";
			},

			end: function () {
				return "end of input";
			},

			other: function (expectation) {
				return expectation.description;
			},
		};

		function hex(ch) {
			return ch.charCodeAt(0).toString(16).toUpperCase();
		}

		function literalEscape(s) {
			return s
				.replace(/\\/g, "\\\\")
				.replace(/"/g, '\\"')
				.replace(/\0/g, "\\0")
				.replace(/\t/g, "\\t")
				.replace(/\n/g, "\\n")
				.replace(/\r/g, "\\r")
				.replace(/[\x00-\x0F]/g, function (ch) {
					return "\\x0" + hex(ch);
				})
				.replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
					return "\\x" + hex(ch);
				});
		}

		function classEscape(s) {
			return s
				.replace(/\\/g, "\\\\")
				.replace(/\]/g, "\\]")
				.replace(/\^/g, "\\^")
				.replace(/-/g, "\\-")
				.replace(/\0/g, "\\0")
				.replace(/\t/g, "\\t")
				.replace(/\n/g, "\\n")
				.replace(/\r/g, "\\r")
				.replace(/[\x00-\x0F]/g, function (ch) {
					return "\\x0" + hex(ch);
				})
				.replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
					return "\\x" + hex(ch);
				});
		}

		function describeExpectation(expectation) {
			return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
		}

		function describeExpected(expected) {
			var descriptions = expected.map(describeExpectation);
			var i, j;

			descriptions.sort();

			if (descriptions.length > 0) {
				for (i = 1, j = 1; i < descriptions.length; i++) {
					if (descriptions[i - 1] !== descriptions[i]) {
						descriptions[j] = descriptions[i];
						j++;
					}
				}
				descriptions.length = j;
			}

			switch (descriptions.length) {
				case 1:
					return descriptions[0];

				case 2:
					return descriptions[0] + " or " + descriptions[1];

				default:
					return (
						descriptions.slice(0, -1).join(", ") +
						", or " +
						descriptions[descriptions.length - 1]
					);
			}
		}

		function describeFound(found) {
			return found ? '"' + literalEscape(found) + '"' : "end of input";
		}

		return (
			"Expected " +
			describeExpected(expected) +
			" but " +
			describeFound(found) +
			" found."
		);
	};

	function peg$parse(input, options) {
		options = options !== undefined ? options : {};

		var peg$FAILED = {};
		var peg$source = options.grammarSource;

		var peg$startRuleFunctions = { program: peg$parseprogram };
		var peg$startRuleFunction = peg$parseprogram;

		var peg$c0 = ",";
		var peg$c1 = ";";
		var peg$c2 = "hscale";
		var peg$c3 = "arcgradient";
		var peg$c4 = "=";
		var peg$c5 = "width";
		var peg$c6 = "wordwraparcs";
		var peg$c7 = "wordwrapentities";
		var peg$c8 = "wordwrapboxes";
		var peg$c9 = "watermark";
		var peg$c10 = ":";
		var peg$c11 = "*";
		var peg$c12 = "{";
		var peg$c13 = "}";
		var peg$c14 = "|||";
		var peg$c15 = "...";
		var peg$c16 = "---";
		var peg$c17 = "--";
		var peg$c18 = "<->";
		var peg$c19 = "==";
		var peg$c20 = "<<=>>";
		var peg$c21 = "<=>";
		var peg$c22 = "..";
		var peg$c23 = "<<>>";
		var peg$c24 = "::";
		var peg$c25 = "<:>";
		var peg$c26 = "->";
		var peg$c27 = "=>>";
		var peg$c28 = "=>";
		var peg$c29 = ">>";
		var peg$c30 = ":>";
		var peg$c31 = "-x";
		var peg$c32 = "<-";
		var peg$c33 = "<<=";
		var peg$c34 = "<=";
		var peg$c35 = "<<";
		var peg$c36 = "<:";
		var peg$c37 = "x-";
		var peg$c38 = "note";
		var peg$c39 = "abox";
		var peg$c40 = "rbox";
		var peg$c41 = "box";
		var peg$c42 = "alt";
		var peg$c43 = "else";
		var peg$c44 = "opt";
		var peg$c45 = "break";
		var peg$c46 = "par";
		var peg$c47 = "seq";
		var peg$c48 = "strict";
		var peg$c49 = "neg";
		var peg$c50 = "critical";
		var peg$c51 = "ignore";
		var peg$c52 = "consider";
		var peg$c53 = "assert";
		var peg$c54 = "loop";
		var peg$c55 = "ref";
		var peg$c56 = "exc";
		var peg$c57 = '"';
		var peg$c58 = '\\"';
		var peg$c59 = "/*";
		var peg$c60 = "*/";
		var peg$c61 = "//";
		var peg$c62 = "#";
		var peg$c63 = ".";
		var peg$c64 = "true";
		var peg$c65 = "false";
		var peg$c66 = "on";
		var peg$c67 = "off";
		var peg$c68 = "auto";

		var peg$r0 = /^[,;{]/;
		var peg$r1 = /^[^;, "\t\n\r=\-><:{*]/;
		var peg$r2 = /^[ \t]/;
		var peg$r3 = /^[\r\n]/;
		var peg$r4 = /^[^\r\n]/;
		var peg$r5 = /^[0-9]/;
		var peg$r6 = /^[0-1]/;

		var peg$e0 = peg$literalExpectation(",", false);
		var peg$e1 = peg$literalExpectation(";", false);
		var peg$e2 = peg$literalExpectation("hscale", true);
		var peg$e3 = peg$literalExpectation("arcgradient", true);
		var peg$e4 = peg$literalExpectation("=", false);
		var peg$e5 = peg$literalExpectation("width", true);
		var peg$e6 = peg$literalExpectation("wordwraparcs", true);
		var peg$e7 = peg$literalExpectation("wordwrapentities", true);
		var peg$e8 = peg$literalExpectation("wordwrapboxes", true);
		var peg$e9 = peg$literalExpectation("watermark", true);
		var peg$e10 = peg$otherExpectation("entity");
		var peg$e11 = peg$literalExpectation(":", false);
		var peg$e12 = peg$literalExpectation("*", false);
		var peg$e13 = peg$literalExpectation("{", false);
		var peg$e14 = peg$literalExpectation("}", false);
		var peg$e15 = peg$otherExpectation("empty row");
		var peg$e16 = peg$literalExpectation("|||", false);
		var peg$e17 = peg$literalExpectation("...", false);
		var peg$e18 = peg$otherExpectation("---");
		var peg$e19 = peg$literalExpectation("---", false);
		var peg$e20 = peg$otherExpectation("bi-directional arrow");
		var peg$e21 = peg$literalExpectation("--", false);
		var peg$e22 = peg$literalExpectation("<->", false);
		var peg$e23 = peg$literalExpectation("==", false);
		var peg$e24 = peg$literalExpectation("<<=>>", false);
		var peg$e25 = peg$literalExpectation("<=>", false);
		var peg$e26 = peg$literalExpectation("..", false);
		var peg$e27 = peg$literalExpectation("<<>>", false);
		var peg$e28 = peg$literalExpectation("::", false);
		var peg$e29 = peg$literalExpectation("<:>", false);
		var peg$e30 = peg$otherExpectation("left to right arrow");
		var peg$e31 = peg$literalExpectation("->", false);
		var peg$e32 = peg$literalExpectation("=>>", false);
		var peg$e33 = peg$literalExpectation("=>", false);
		var peg$e34 = peg$literalExpectation(">>", false);
		var peg$e35 = peg$literalExpectation(":>", false);
		var peg$e36 = peg$literalExpectation("-x", true);
		var peg$e37 = peg$otherExpectation("right to left arrow");
		var peg$e38 = peg$literalExpectation("<-", false);
		var peg$e39 = peg$literalExpectation("<<=", false);
		var peg$e40 = peg$literalExpectation("<=", false);
		var peg$e41 = peg$literalExpectation("<<", false);
		var peg$e42 = peg$literalExpectation("<:", false);
		var peg$e43 = peg$literalExpectation("x-", true);
		var peg$e44 = peg$otherExpectation("box");
		var peg$e45 = peg$literalExpectation("note", true);
		var peg$e46 = peg$literalExpectation("abox", true);
		var peg$e47 = peg$literalExpectation("rbox", true);
		var peg$e48 = peg$literalExpectation("box", true);
		var peg$e49 = peg$otherExpectation("inline expression");
		var peg$e50 = peg$literalExpectation("alt", true);
		var peg$e51 = peg$literalExpectation("else", true);
		var peg$e52 = peg$literalExpectation("opt", true);
		var peg$e53 = peg$literalExpectation("break", true);
		var peg$e54 = peg$literalExpectation("par", true);
		var peg$e55 = peg$literalExpectation("seq", true);
		var peg$e56 = peg$literalExpectation("strict", true);
		var peg$e57 = peg$literalExpectation("neg", true);
		var peg$e58 = peg$literalExpectation("critical", true);
		var peg$e59 = peg$literalExpectation("ignore", true);
		var peg$e60 = peg$literalExpectation("consider", true);
		var peg$e61 = peg$literalExpectation("assert", true);
		var peg$e62 = peg$literalExpectation("loop", true);
		var peg$e63 = peg$literalExpectation("ref", true);
		var peg$e64 = peg$literalExpectation("exc", true);
		var peg$e65 = peg$otherExpectation("double quoted string");
		var peg$e66 = peg$literalExpectation('"', false);
		var peg$e67 = peg$literalExpectation('\\"', false);
		var peg$e68 = peg$anyExpectation();
		var peg$e69 = peg$classExpectation([",", ";", "{"], false, false);
		var peg$e70 = peg$otherExpectation("identifier");
		var peg$e71 = peg$classExpectation(
			[";", ",", " ", '"', "\t", "\n", "\r", "=", "-", ">", "<", ":", "{", "*"],
			true,
			false,
		);
		var peg$e72 = peg$otherExpectation("whitespace");
		var peg$e73 = peg$classExpectation([" ", "\t"], false, false);
		var peg$e74 = peg$otherExpectation("lineend");
		var peg$e75 = peg$classExpectation(["\r", "\n"], false, false);
		var peg$e76 = peg$literalExpectation("/*", false);
		var peg$e77 = peg$literalExpectation("*/", false);
		var peg$e78 = peg$literalExpectation("//", false);
		var peg$e79 = peg$literalExpectation("#", false);
		var peg$e80 = peg$classExpectation(["\r", "\n"], true, false);
		var peg$e81 = peg$otherExpectation("comment");
		var peg$e82 = peg$otherExpectation("number");
		var peg$e83 = peg$classExpectation([["0", "9"]], false, false);
		var peg$e84 = peg$literalExpectation(".", false);
		var peg$e85 = peg$otherExpectation("boolean");
		var peg$e86 = peg$literalExpectation("true", true);
		var peg$e87 = peg$literalExpectation("false", true);
		var peg$e88 = peg$literalExpectation("on", true);
		var peg$e89 = peg$literalExpectation("off", true);
		var peg$e90 = peg$classExpectation([["0", "1"]], false, false);
		var peg$e91 = peg$otherExpectation("size");
		var peg$e92 = peg$literalExpectation("auto", true);

		var peg$f0 = function (pre, declarations) {
			declarations.entities = extractUndeclaredEntities(
				declarations.entities || [],
				declarations.arcs,
			);
			declarations = {
				meta: parserHelpers.getMetaInfo(
					declarations.options,
					declarations.arcs,
				),
				...declarations,
			};

			if (pre.length > 0) {
				declarations = { precomment: pre, ...declarations };
			}
			return declarations;
		};
		var peg$f1 = function (options, entities, arcs) {
			var lDeclarationList = {};
			if (options) {
				lDeclarationList.options = options;
			}
			if (entities) {
				lDeclarationList.entities = entities;
			}
			if (arcs) {
				lDeclarationList.arcs = arcs;
			}
			return lDeclarationList;
		};
		var peg$f2 = function (o) {
			return o;
		};
		var peg$f3 = function (o) {
			return o;
		};
		var peg$f4 = function (options) {
			// make the option array into an options object
			return options[0]
				.concat(options[1])
				.reduce((pAll, pCurrent) => Object.assign(pAll, pCurrent), {});
		};
		var peg$f5 = function (name, value) {
			return parserHelpers.nameValue2Option(name, value);
		};
		var peg$f6 = function (name, value) {
			return parserHelpers.nameValue2Option(name, value);
		};
		var peg$f7 = function (name, value) {
			return parserHelpers.nameValue2Option(
				name,
				parserHelpers.flattenBoolean(value),
			);
		};
		var peg$f8 = function (name, value) {
			return parserHelpers.nameValue2Option(
				name,
				parserHelpers.flattenBoolean(value),
			);
		};
		var peg$f9 = function (name, value) {
			return parserHelpers.nameValue2Option(
				name,
				parserHelpers.flattenBoolean(value),
			);
		};
		var peg$f10 = function (name, value) {
			return parserHelpers.nameValue2Option(name, value);
		};
		var peg$f11 = function (e) {
			return e;
		};
		var peg$f12 = function (e) {
			return e;
		};
		var peg$f13 = function (el) {
			return el[0].concat(el[1]);
		};
		var peg$f14 = function (name, l) {
			return l;
		};
		var peg$f15 = function (name, label) {
			var lEntity = initEntity(name);
			if (!!label) {
				lEntity.label = label;
			}
			return lEntity;
		};
		var peg$f16 = function (a) {
			return a;
		};
		var peg$f17 = function (a) {
			return a;
		};
		var peg$f18 = function (a) {
			return a;
		};
		var peg$f19 = function (al) {
			return al[0].concat(al[1]);
		};
		var peg$f20 = function (sa) {
			return sa;
		};
		var peg$f21 = function (da) {
			return da;
		};
		var peg$f22 = function (ca) {
			return ca;
		};
		var peg$f23 = function (ra, s) {
			return s;
		};
		var peg$f24 = function (ra, label) {
			if (label) {
				ra.label = label;
			}
			return ra;
		};
		var peg$f25 = function (kind) {
			return { kind: kind };
		};
		var peg$f26 = function (kind) {
			return { kind: kind };
		};
		var peg$f27 = function (from, kind, to) {
			return { kind: kind, from: from, to: to };
		};
		var peg$f28 = function (kind, to) {
			return { kind: kind, from: "*", to: to };
		};
		var peg$f29 = function (from, kind) {
			return { kind: kind, from: from, to: "*" };
		};
		var peg$f30 = function (from, kind) {
			return { kind: kind, from: from, to: "*" };
		};
		var peg$f31 = function (from, kind, to, s) {
			return s;
		};
		var peg$f32 = function (from, kind, to, label, arcs) {
			var retval = {
				kind: kind,
				from: from,
				to: to,
				arcs: arcs,
			};
			if (label) {
				retval.label = label;
			}
			return retval;
		};
		var peg$f33 = function (kind) {
			return kind.toLowerCase();
		};
		var peg$f34 = function (kind) {
			return kind.toLowerCase();
		};
		var peg$f35 = function (s) {
			return s.join("");
		};
		var peg$f36 = function (c) {
			return c;
		};
		var peg$f37 = function (s) {
			return s.join("").trim();
		};
		var peg$f38 = function (c) {
			return c;
		};
		var peg$f39 = function (letters) {
			return letters.join("");
		};
		var peg$f40 = function (c) {
			return c;
		};
		var peg$f41 = function (c) {
			return c;
		};
		var peg$f42 = function (c) {
			return c;
		};
		var peg$f43 = function (start, com, end) {
			return start + com.join("") + end;
		};
		var peg$f44 = function (start, com) {
			return start + com.join("");
		};
		var peg$f45 = function (s) {
			return s;
		};
		var peg$f46 = function (i) {
			return i.toString();
		};
		var peg$f47 = function (s) {
			return s.toString();
		};
		var peg$f48 = function (digits) {
			return parseInt(digits.join(""), 10);
		};
		var peg$f49 = function (digits) {
			return parseFloat(digits.join(""));
		};
		var peg$f50 = function (bs) {
			return bs;
		};
		var peg$f51 = function (b) {
			return b.toString();
		};
		var peg$f52 = function (s) {
			return s;
		};
		var peg$f53 = function (s) {
			return s;
		};
		var peg$f54 = function (n) {
			return n.toString();
		};
		var peg$f55 = function (s) {
			return s.toLowerCase();
		};
		var peg$currPos = options.peg$currPos | 0;
		var peg$savedPos = peg$currPos;
		var peg$posDetailsCache = [{ line: 1, column: 1 }];
		var peg$maxFailPos = peg$currPos;
		var peg$maxFailExpected = options.peg$maxFailExpected || [];
		var peg$silentFails = options.peg$silentFails | 0;

		var peg$result;

		if (options.startRule) {
			if (!(options.startRule in peg$startRuleFunctions)) {
				throw new Error(
					"Can't start parsing from rule \"" + options.startRule + '".',
				);
			}

			peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
		}

		function text() {
			return input.substring(peg$savedPos, peg$currPos);
		}

		function offset() {
			return peg$savedPos;
		}

		function range() {
			return {
				source: peg$source,
				start: peg$savedPos,
				end: peg$currPos,
			};
		}

		function location() {
			return peg$computeLocation(peg$savedPos, peg$currPos);
		}

		function expected(description, location) {
			location =
				location !== undefined
					? location
					: peg$computeLocation(peg$savedPos, peg$currPos);

			throw peg$buildStructuredError(
				[peg$otherExpectation(description)],
				input.substring(peg$savedPos, peg$currPos),
				location,
			);
		}

		function error(message, location) {
			location =
				location !== undefined
					? location
					: peg$computeLocation(peg$savedPos, peg$currPos);

			throw peg$buildSimpleError(message, location);
		}

		function peg$literalExpectation(text, ignoreCase) {
			return { type: "literal", text: text, ignoreCase: ignoreCase };
		}

		function peg$classExpectation(parts, inverted, ignoreCase) {
			return {
				type: "class",
				parts: parts,
				inverted: inverted,
				ignoreCase: ignoreCase,
			};
		}

		function peg$anyExpectation() {
			return { type: "any" };
		}

		function peg$endExpectation() {
			return { type: "end" };
		}

		function peg$otherExpectation(description) {
			return { type: "other", description: description };
		}

		function peg$computePosDetails(pos) {
			var details = peg$posDetailsCache[pos];
			var p;

			if (details) {
				return details;
			} else {
				if (pos >= peg$posDetailsCache.length) {
					p = peg$posDetailsCache.length - 1;
				} else {
					p = pos;
					while (!peg$posDetailsCache[--p]) {}
				}

				details = peg$posDetailsCache[p];
				details = {
					line: details.line,
					column: details.column,
				};

				while (p < pos) {
					if (input.charCodeAt(p) === 10) {
						details.line++;
						details.column = 1;
					} else {
						details.column++;
					}

					p++;
				}

				peg$posDetailsCache[pos] = details;

				return details;
			}
		}

		function peg$computeLocation(startPos, endPos, offset) {
			var startPosDetails = peg$computePosDetails(startPos);
			var endPosDetails = peg$computePosDetails(endPos);

			var res = {
				source: peg$source,
				start: {
					offset: startPos,
					line: startPosDetails.line,
					column: startPosDetails.column,
				},
				end: {
					offset: endPos,
					line: endPosDetails.line,
					column: endPosDetails.column,
				},
			};
			if (offset && peg$source && typeof peg$source.offset === "function") {
				res.start = peg$source.offset(res.start);
				res.end = peg$source.offset(res.end);
			}
			return res;
		}

		function peg$fail(expected) {
			if (peg$currPos < peg$maxFailPos) {
				return;
			}

			if (peg$currPos > peg$maxFailPos) {
				peg$maxFailPos = peg$currPos;
				peg$maxFailExpected = [];
			}

			peg$maxFailExpected.push(expected);
		}

		function peg$buildSimpleError(message, location) {
			return new peg$SyntaxError(message, null, null, location);
		}

		function peg$buildStructuredError(expected, found, location) {
			return new peg$SyntaxError(
				peg$SyntaxError.buildMessage(expected, found),
				expected,
				found,
				location,
			);
		}

		function peg$parseprogram() {
			var s0, s1, s2, s3;

			s0 = peg$currPos;
			s1 = peg$parse_();
			s2 = peg$parsedeclarationlist();
			s3 = peg$parse_();
			peg$savedPos = s0;
			s0 = peg$f0(s1, s2);

			return s0;
		}

		function peg$parsedeclarationlist() {
			var s0, s1, s2, s3;

			s0 = peg$currPos;
			s1 = peg$parseoptionlist();
			if (s1 === peg$FAILED) {
				s1 = null;
			}
			s2 = peg$parseentitylist();
			if (s2 === peg$FAILED) {
				s2 = null;
			}
			s3 = peg$parsearclist();
			if (s3 === peg$FAILED) {
				s3 = null;
			}
			peg$savedPos = s0;
			s0 = peg$f1(s1, s2, s3);

			return s0;
		}

		function peg$parseoptionlist() {
			var s0, s1, s2, s3, s4, s5;

			s0 = peg$currPos;
			s1 = peg$currPos;
			s2 = [];
			s3 = peg$currPos;
			s4 = peg$parseoption();
			if (s4 !== peg$FAILED) {
				if (input.charCodeAt(peg$currPos) === 44) {
					s5 = peg$c0;
					peg$currPos++;
				} else {
					s5 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$e0);
					}
				}
				if (s5 !== peg$FAILED) {
					peg$savedPos = s3;
					s3 = peg$f2(s4);
				} else {
					peg$currPos = s3;
					s3 = peg$FAILED;
				}
			} else {
				peg$currPos = s3;
				s3 = peg$FAILED;
			}
			while (s3 !== peg$FAILED) {
				s2.push(s3);
				s3 = peg$currPos;
				s4 = peg$parseoption();
				if (s4 !== peg$FAILED) {
					if (input.charCodeAt(peg$currPos) === 44) {
						s5 = peg$c0;
						peg$currPos++;
					} else {
						s5 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$e0);
						}
					}
					if (s5 !== peg$FAILED) {
						peg$savedPos = s3;
						s3 = peg$f2(s4);
					} else {
						peg$currPos = s3;
						s3 = peg$FAILED;
					}
				} else {
					peg$currPos = s3;
					s3 = peg$FAILED;
				}
			}
			s3 = peg$currPos;
			s4 = peg$parseoption();
			if (s4 !== peg$FAILED) {
				if (input.charCodeAt(peg$currPos) === 59) {
					s5 = peg$c1;
					peg$currPos++;
				} else {
					s5 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$e1);
					}
				}
				if (s5 !== peg$FAILED) {
					peg$savedPos = s3;
					s3 = peg$f3(s4);
				} else {
					peg$currPos = s3;
					s3 = peg$FAILED;
				}
			} else {
				peg$currPos = s3;
				s3 = peg$FAILED;
			}
			if (s3 !== peg$FAILED) {
				s2 = [s2, s3];
				s1 = s2;
			} else {
				peg$currPos = s1;
				s1 = peg$FAILED;
			}
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$f4(s1);
			}
			s0 = s1;

			return s0;
		}

		function peg$parseoption() {
			var s0, s1, s2, s3, s4, s5, s6, s7;

			s0 = peg$currPos;
			s1 = peg$parse_();
			s2 = input.substr(peg$currPos, 6);
			if (s2.toLowerCase() === peg$c2) {
				peg$currPos += 6;
			} else {
				s2 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e2);
				}
			}
			if (s2 === peg$FAILED) {
				s2 = input.substr(peg$currPos, 11);
				if (s2.toLowerCase() === peg$c3) {
					peg$currPos += 11;
				} else {
					s2 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$e3);
					}
				}
			}
			if (s2 !== peg$FAILED) {
				s3 = peg$parse_();
				if (input.charCodeAt(peg$currPos) === 61) {
					s4 = peg$c4;
					peg$currPos++;
				} else {
					s4 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$e4);
					}
				}
				if (s4 !== peg$FAILED) {
					s5 = peg$parse_();
					s6 = peg$parsenumberlike();
					if (s6 !== peg$FAILED) {
						s7 = peg$parse_();
						peg$savedPos = s0;
						s0 = peg$f5(s2, s6);
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
			if (s0 === peg$FAILED) {
				s0 = peg$currPos;
				s1 = peg$parse_();
				s2 = input.substr(peg$currPos, 5);
				if (s2.toLowerCase() === peg$c5) {
					peg$currPos += 5;
				} else {
					s2 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$e5);
					}
				}
				if (s2 !== peg$FAILED) {
					s3 = peg$parse_();
					if (input.charCodeAt(peg$currPos) === 61) {
						s4 = peg$c4;
						peg$currPos++;
					} else {
						s4 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$e4);
						}
					}
					if (s4 !== peg$FAILED) {
						s5 = peg$parse_();
						s6 = peg$parsesizelike();
						if (s6 !== peg$FAILED) {
							s7 = peg$parse_();
							peg$savedPos = s0;
							s0 = peg$f6(s2, s6);
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
				if (s0 === peg$FAILED) {
					s0 = peg$currPos;
					s1 = peg$parse_();
					s2 = input.substr(peg$currPos, 12);
					if (s2.toLowerCase() === peg$c6) {
						peg$currPos += 12;
					} else {
						s2 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$e6);
						}
					}
					if (s2 !== peg$FAILED) {
						s3 = peg$parse_();
						if (input.charCodeAt(peg$currPos) === 61) {
							s4 = peg$c4;
							peg$currPos++;
						} else {
							s4 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$e4);
							}
						}
						if (s4 !== peg$FAILED) {
							s5 = peg$parse_();
							s6 = peg$parsebooleanlike();
							if (s6 !== peg$FAILED) {
								s7 = peg$parse_();
								peg$savedPos = s0;
								s0 = peg$f7(s2, s6);
							} else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
					if (s0 === peg$FAILED) {
						s0 = peg$currPos;
						s1 = peg$parse_();
						s2 = input.substr(peg$currPos, 16);
						if (s2.toLowerCase() === peg$c7) {
							peg$currPos += 16;
						} else {
							s2 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$e7);
							}
						}
						if (s2 !== peg$FAILED) {
							s3 = peg$parse_();
							if (input.charCodeAt(peg$currPos) === 61) {
								s4 = peg$c4;
								peg$currPos++;
							} else {
								s4 = peg$FAILED;
								if (peg$silentFails === 0) {
									peg$fail(peg$e4);
								}
							}
							if (s4 !== peg$FAILED) {
								s5 = peg$parse_();
								s6 = peg$parsebooleanlike();
								if (s6 !== peg$FAILED) {
									s7 = peg$parse_();
									peg$savedPos = s0;
									s0 = peg$f8(s2, s6);
								} else {
									peg$currPos = s0;
									s0 = peg$FAILED;
								}
							} else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
						if (s0 === peg$FAILED) {
							s0 = peg$currPos;
							s1 = peg$parse_();
							s2 = input.substr(peg$currPos, 13);
							if (s2.toLowerCase() === peg$c8) {
								peg$currPos += 13;
							} else {
								s2 = peg$FAILED;
								if (peg$silentFails === 0) {
									peg$fail(peg$e8);
								}
							}
							if (s2 !== peg$FAILED) {
								s3 = peg$parse_();
								if (input.charCodeAt(peg$currPos) === 61) {
									s4 = peg$c4;
									peg$currPos++;
								} else {
									s4 = peg$FAILED;
									if (peg$silentFails === 0) {
										peg$fail(peg$e4);
									}
								}
								if (s4 !== peg$FAILED) {
									s5 = peg$parse_();
									s6 = peg$parsebooleanlike();
									if (s6 !== peg$FAILED) {
										s7 = peg$parse_();
										peg$savedPos = s0;
										s0 = peg$f9(s2, s6);
									} else {
										peg$currPos = s0;
										s0 = peg$FAILED;
									}
								} else {
									peg$currPos = s0;
									s0 = peg$FAILED;
								}
							} else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
							if (s0 === peg$FAILED) {
								s0 = peg$currPos;
								s1 = peg$parse_();
								s2 = input.substr(peg$currPos, 9);
								if (s2.toLowerCase() === peg$c9) {
									peg$currPos += 9;
								} else {
									s2 = peg$FAILED;
									if (peg$silentFails === 0) {
										peg$fail(peg$e9);
									}
								}
								if (s2 !== peg$FAILED) {
									s3 = peg$parse_();
									if (input.charCodeAt(peg$currPos) === 61) {
										s4 = peg$c4;
										peg$currPos++;
									} else {
										s4 = peg$FAILED;
										if (peg$silentFails === 0) {
											peg$fail(peg$e4);
										}
									}
									if (s4 !== peg$FAILED) {
										s5 = peg$parse_();
										s6 = peg$parsequotedstring();
										if (s6 !== peg$FAILED) {
											s7 = peg$parse_();
											peg$savedPos = s0;
											s0 = peg$f10(s2, s6);
										} else {
											peg$currPos = s0;
											s0 = peg$FAILED;
										}
									} else {
										peg$currPos = s0;
										s0 = peg$FAILED;
									}
								} else {
									peg$currPos = s0;
									s0 = peg$FAILED;
								}
							}
						}
					}
				}
			}

			return s0;
		}

		function peg$parseentitylist() {
			var s0, s1, s2, s3, s4, s5;

			s0 = peg$currPos;
			s1 = peg$currPos;
			s2 = [];
			s3 = peg$currPos;
			s4 = peg$parseentity();
			if (s4 !== peg$FAILED) {
				if (input.charCodeAt(peg$currPos) === 44) {
					s5 = peg$c0;
					peg$currPos++;
				} else {
					s5 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$e0);
					}
				}
				if (s5 !== peg$FAILED) {
					peg$savedPos = s3;
					s3 = peg$f11(s4);
				} else {
					peg$currPos = s3;
					s3 = peg$FAILED;
				}
			} else {
				peg$currPos = s3;
				s3 = peg$FAILED;
			}
			while (s3 !== peg$FAILED) {
				s2.push(s3);
				s3 = peg$currPos;
				s4 = peg$parseentity();
				if (s4 !== peg$FAILED) {
					if (input.charCodeAt(peg$currPos) === 44) {
						s5 = peg$c0;
						peg$currPos++;
					} else {
						s5 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$e0);
						}
					}
					if (s5 !== peg$FAILED) {
						peg$savedPos = s3;
						s3 = peg$f11(s4);
					} else {
						peg$currPos = s3;
						s3 = peg$FAILED;
					}
				} else {
					peg$currPos = s3;
					s3 = peg$FAILED;
				}
			}
			s3 = peg$currPos;
			s4 = peg$parseentity();
			if (s4 !== peg$FAILED) {
				if (input.charCodeAt(peg$currPos) === 59) {
					s5 = peg$c1;
					peg$currPos++;
				} else {
					s5 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$e1);
					}
				}
				if (s5 !== peg$FAILED) {
					peg$savedPos = s3;
					s3 = peg$f12(s4);
				} else {
					peg$currPos = s3;
					s3 = peg$FAILED;
				}
			} else {
				peg$currPos = s3;
				s3 = peg$FAILED;
			}
			if (s3 !== peg$FAILED) {
				s2 = [s2, s3];
				s1 = s2;
			} else {
				peg$currPos = s1;
				s1 = peg$FAILED;
			}
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$f13(s1);
			}
			s0 = s1;

			return s0;
		}

		function peg$parseentity() {
			var s0, s1, s2, s3, s4, s5, s6, s7, s8;

			peg$silentFails++;
			s0 = peg$currPos;
			s1 = peg$parse_();
			s2 = peg$parseidentifier();
			if (s2 !== peg$FAILED) {
				s3 = peg$parse_();
				s4 = peg$currPos;
				if (input.charCodeAt(peg$currPos) === 58) {
					s5 = peg$c10;
					peg$currPos++;
				} else {
					s5 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$e11);
					}
				}
				if (s5 !== peg$FAILED) {
					s6 = peg$parse_();
					s7 = peg$parsestring();
					if (s7 !== peg$FAILED) {
						s8 = peg$parse_();
						peg$savedPos = s4;
						s4 = peg$f14(s2, s7);
					} else {
						peg$currPos = s4;
						s4 = peg$FAILED;
					}
				} else {
					peg$currPos = s4;
					s4 = peg$FAILED;
				}
				if (s4 === peg$FAILED) {
					s4 = null;
				}
				peg$savedPos = s0;
				s0 = peg$f15(s2, s4);
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e10);
				}
			}

			return s0;
		}

		function peg$parsearclist() {
			var s0, s1, s2, s3, s4;

			s0 = [];
			s1 = peg$currPos;
			s2 = peg$parsearcline();
			if (s2 !== peg$FAILED) {
				s3 = peg$parse_();
				if (input.charCodeAt(peg$currPos) === 59) {
					s4 = peg$c1;
					peg$currPos++;
				} else {
					s4 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$e1);
					}
				}
				if (s4 !== peg$FAILED) {
					peg$savedPos = s1;
					s1 = peg$f16(s2);
				} else {
					peg$currPos = s1;
					s1 = peg$FAILED;
				}
			} else {
				peg$currPos = s1;
				s1 = peg$FAILED;
			}
			if (s1 !== peg$FAILED) {
				while (s1 !== peg$FAILED) {
					s0.push(s1);
					s1 = peg$currPos;
					s2 = peg$parsearcline();
					if (s2 !== peg$FAILED) {
						s3 = peg$parse_();
						if (input.charCodeAt(peg$currPos) === 59) {
							s4 = peg$c1;
							peg$currPos++;
						} else {
							s4 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$e1);
							}
						}
						if (s4 !== peg$FAILED) {
							peg$savedPos = s1;
							s1 = peg$f16(s2);
						} else {
							peg$currPos = s1;
							s1 = peg$FAILED;
						}
					} else {
						peg$currPos = s1;
						s1 = peg$FAILED;
					}
				}
			} else {
				s0 = peg$FAILED;
			}

			return s0;
		}

		function peg$parsearcline() {
			var s0, s1, s2, s3, s4, s5;

			s0 = peg$currPos;
			s1 = peg$currPos;
			s2 = [];
			s3 = peg$currPos;
			s4 = peg$parsearc();
			if (s4 !== peg$FAILED) {
				if (input.charCodeAt(peg$currPos) === 44) {
					s5 = peg$c0;
					peg$currPos++;
				} else {
					s5 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$e0);
					}
				}
				if (s5 !== peg$FAILED) {
					peg$savedPos = s3;
					s3 = peg$f17(s4);
				} else {
					peg$currPos = s3;
					s3 = peg$FAILED;
				}
			} else {
				peg$currPos = s3;
				s3 = peg$FAILED;
			}
			while (s3 !== peg$FAILED) {
				s2.push(s3);
				s3 = peg$currPos;
				s4 = peg$parsearc();
				if (s4 !== peg$FAILED) {
					if (input.charCodeAt(peg$currPos) === 44) {
						s5 = peg$c0;
						peg$currPos++;
					} else {
						s5 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$e0);
						}
					}
					if (s5 !== peg$FAILED) {
						peg$savedPos = s3;
						s3 = peg$f17(s4);
					} else {
						peg$currPos = s3;
						s3 = peg$FAILED;
					}
				} else {
					peg$currPos = s3;
					s3 = peg$FAILED;
				}
			}
			s3 = peg$currPos;
			s4 = peg$parsearc();
			if (s4 !== peg$FAILED) {
				peg$savedPos = s3;
				s4 = peg$f18(s4);
			}
			s3 = s4;
			if (s3 !== peg$FAILED) {
				s2 = [s2, s3];
				s1 = s2;
			} else {
				peg$currPos = s1;
				s1 = peg$FAILED;
			}
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$f19(s1);
			}
			s0 = s1;

			return s0;
		}

		function peg$parsearc() {
			var s0;

			s0 = peg$parseregulararc();
			if (s0 === peg$FAILED) {
				s0 = peg$parsespanarc();
			}

			return s0;
		}

		function peg$parseregulararc() {
			var s0, s1, s2, s3, s4, s5, s6;

			s0 = peg$currPos;
			s1 = peg$currPos;
			s2 = peg$parsesinglearc();
			if (s2 !== peg$FAILED) {
				peg$savedPos = s1;
				s2 = peg$f20(s2);
			}
			s1 = s2;
			if (s1 === peg$FAILED) {
				s1 = peg$currPos;
				s2 = peg$parsedualarc();
				if (s2 !== peg$FAILED) {
					peg$savedPos = s1;
					s2 = peg$f21(s2);
				}
				s1 = s2;
				if (s1 === peg$FAILED) {
					s1 = peg$currPos;
					s2 = peg$parsecommentarc();
					if (s2 !== peg$FAILED) {
						peg$savedPos = s1;
						s2 = peg$f22(s2);
					}
					s1 = s2;
				}
			}
			if (s1 !== peg$FAILED) {
				s2 = peg$currPos;
				if (input.charCodeAt(peg$currPos) === 58) {
					s3 = peg$c10;
					peg$currPos++;
				} else {
					s3 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$e11);
					}
				}
				if (s3 !== peg$FAILED) {
					s4 = peg$parse_();
					s5 = peg$parsestring();
					if (s5 !== peg$FAILED) {
						s6 = peg$parse_();
						peg$savedPos = s2;
						s2 = peg$f23(s1, s5);
					} else {
						peg$currPos = s2;
						s2 = peg$FAILED;
					}
				} else {
					peg$currPos = s2;
					s2 = peg$FAILED;
				}
				if (s2 === peg$FAILED) {
					s2 = null;
				}
				peg$savedPos = s0;
				s0 = peg$f24(s1, s2);
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}

			return s0;
		}

		function peg$parsesinglearc() {
			var s0, s1, s2, s3;

			s0 = peg$currPos;
			s1 = peg$parse_();
			s2 = peg$parsesinglearctoken();
			if (s2 !== peg$FAILED) {
				s3 = peg$parse_();
				peg$savedPos = s0;
				s0 = peg$f25(s2);
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}

			return s0;
		}

		function peg$parsecommentarc() {
			var s0, s1, s2, s3;

			s0 = peg$currPos;
			s1 = peg$parse_();
			s2 = peg$parsecommenttoken();
			if (s2 !== peg$FAILED) {
				s3 = peg$parse_();
				peg$savedPos = s0;
				s0 = peg$f26(s2);
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}

			return s0;
		}

		function peg$parsedualarc() {
			var s0, s1, s2, s3, s4, s5, s6, s7;

			s0 = peg$currPos;
			s1 = peg$parse_();
			s2 = peg$parseidentifier();
			if (s2 !== peg$FAILED) {
				s3 = peg$parse_();
				s4 = peg$parsedualarctoken();
				if (s4 !== peg$FAILED) {
					s5 = peg$parse_();
					s6 = peg$parseidentifier();
					if (s6 !== peg$FAILED) {
						s7 = peg$parse_();
						peg$savedPos = s0;
						s0 = peg$f27(s2, s4, s6);
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
			if (s0 === peg$FAILED) {
				s0 = peg$currPos;
				s1 = peg$parse_();
				if (input.charCodeAt(peg$currPos) === 42) {
					s2 = peg$c11;
					peg$currPos++;
				} else {
					s2 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$e12);
					}
				}
				if (s2 !== peg$FAILED) {
					s3 = peg$parse_();
					s4 = peg$parsebckarrowtoken();
					if (s4 !== peg$FAILED) {
						s5 = peg$parse_();
						s6 = peg$parseidentifier();
						if (s6 !== peg$FAILED) {
							s7 = peg$parse_();
							peg$savedPos = s0;
							s0 = peg$f28(s4, s6);
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
				if (s0 === peg$FAILED) {
					s0 = peg$currPos;
					s1 = peg$parse_();
					s2 = peg$parseidentifier();
					if (s2 !== peg$FAILED) {
						s3 = peg$parse_();
						s4 = peg$parsefwdarrowtoken();
						if (s4 !== peg$FAILED) {
							s5 = peg$parse_();
							if (input.charCodeAt(peg$currPos) === 42) {
								s6 = peg$c11;
								peg$currPos++;
							} else {
								s6 = peg$FAILED;
								if (peg$silentFails === 0) {
									peg$fail(peg$e12);
								}
							}
							if (s6 !== peg$FAILED) {
								s7 = peg$parse_();
								peg$savedPos = s0;
								s0 = peg$f29(s2, s4);
							} else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
					if (s0 === peg$FAILED) {
						s0 = peg$currPos;
						s1 = peg$parse_();
						s2 = peg$parseidentifier();
						if (s2 !== peg$FAILED) {
							s3 = peg$parse_();
							s4 = peg$parsebidiarrowtoken();
							if (s4 !== peg$FAILED) {
								s5 = peg$parse_();
								if (input.charCodeAt(peg$currPos) === 42) {
									s6 = peg$c11;
									peg$currPos++;
								} else {
									s6 = peg$FAILED;
									if (peg$silentFails === 0) {
										peg$fail(peg$e12);
									}
								}
								if (s6 !== peg$FAILED) {
									s7 = peg$parse_();
									peg$savedPos = s0;
									s0 = peg$f30(s2, s4);
								} else {
									peg$currPos = s0;
									s0 = peg$FAILED;
								}
							} else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					}
				}
			}

			return s0;
		}

		function peg$parsespanarc() {
			var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

			s0 = peg$currPos;
			s1 = peg$parse_();
			s2 = peg$parseidentifier();
			if (s2 !== peg$FAILED) {
				s3 = peg$parse_();
				s4 = peg$parsespanarctoken();
				if (s4 !== peg$FAILED) {
					s5 = peg$parse_();
					s6 = peg$parseidentifier();
					if (s6 !== peg$FAILED) {
						s7 = peg$parse_();
						s8 = peg$currPos;
						if (input.charCodeAt(peg$currPos) === 58) {
							s9 = peg$c10;
							peg$currPos++;
						} else {
							s9 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$e11);
							}
						}
						if (s9 !== peg$FAILED) {
							s10 = peg$parse_();
							s11 = peg$parsestring();
							if (s11 !== peg$FAILED) {
								s12 = peg$parse_();
								peg$savedPos = s8;
								s8 = peg$f31(s2, s4, s6, s11);
							} else {
								peg$currPos = s8;
								s8 = peg$FAILED;
							}
						} else {
							peg$currPos = s8;
							s8 = peg$FAILED;
						}
						if (s8 === peg$FAILED) {
							s8 = null;
						}
						if (input.charCodeAt(peg$currPos) === 123) {
							s9 = peg$c12;
							peg$currPos++;
						} else {
							s9 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$e13);
							}
						}
						if (s9 !== peg$FAILED) {
							s10 = peg$parse_();
							s11 = peg$parsearclist();
							if (s11 === peg$FAILED) {
								s11 = null;
							}
							s12 = peg$parse_();
							if (input.charCodeAt(peg$currPos) === 125) {
								s13 = peg$c13;
								peg$currPos++;
							} else {
								s13 = peg$FAILED;
								if (peg$silentFails === 0) {
									peg$fail(peg$e14);
								}
							}
							if (s13 !== peg$FAILED) {
								s14 = peg$parse_();
								peg$savedPos = s0;
								s0 = peg$f32(s2, s4, s6, s8, s11);
							} else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}

			return s0;
		}

		function peg$parsesinglearctoken() {
			var s0, s1;

			peg$silentFails++;
			if (input.substr(peg$currPos, 3) === peg$c14) {
				s0 = peg$c14;
				peg$currPos += 3;
			} else {
				s0 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e16);
				}
			}
			if (s0 === peg$FAILED) {
				if (input.substr(peg$currPos, 3) === peg$c15) {
					s0 = peg$c15;
					peg$currPos += 3;
				} else {
					s0 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$e17);
					}
				}
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e15);
				}
			}

			return s0;
		}

		function peg$parsecommenttoken() {
			var s0, s1;

			peg$silentFails++;
			if (input.substr(peg$currPos, 3) === peg$c16) {
				s0 = peg$c16;
				peg$currPos += 3;
			} else {
				s0 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e19);
				}
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e18);
				}
			}

			return s0;
		}

		function peg$parsedualarctoken() {
			var s0, s1;

			s0 = peg$currPos;
			s1 = peg$parsebidiarrowtoken();
			if (s1 === peg$FAILED) {
				s1 = peg$parsefwdarrowtoken();
				if (s1 === peg$FAILED) {
					s1 = peg$parsebckarrowtoken();
					if (s1 === peg$FAILED) {
						s1 = peg$parseboxtoken();
					}
				}
			}
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$f33(s1);
			}
			s0 = s1;

			return s0;
		}

		function peg$parsebidiarrowtoken() {
			var s0, s1;

			peg$silentFails++;
			if (input.substr(peg$currPos, 2) === peg$c17) {
				s0 = peg$c17;
				peg$currPos += 2;
			} else {
				s0 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e21);
				}
			}
			if (s0 === peg$FAILED) {
				if (input.substr(peg$currPos, 3) === peg$c18) {
					s0 = peg$c18;
					peg$currPos += 3;
				} else {
					s0 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$e22);
					}
				}
				if (s0 === peg$FAILED) {
					if (input.substr(peg$currPos, 2) === peg$c19) {
						s0 = peg$c19;
						peg$currPos += 2;
					} else {
						s0 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$e23);
						}
					}
					if (s0 === peg$FAILED) {
						if (input.substr(peg$currPos, 5) === peg$c20) {
							s0 = peg$c20;
							peg$currPos += 5;
						} else {
							s0 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$e24);
							}
						}
						if (s0 === peg$FAILED) {
							if (input.substr(peg$currPos, 3) === peg$c21) {
								s0 = peg$c21;
								peg$currPos += 3;
							} else {
								s0 = peg$FAILED;
								if (peg$silentFails === 0) {
									peg$fail(peg$e25);
								}
							}
							if (s0 === peg$FAILED) {
								if (input.substr(peg$currPos, 2) === peg$c22) {
									s0 = peg$c22;
									peg$currPos += 2;
								} else {
									s0 = peg$FAILED;
									if (peg$silentFails === 0) {
										peg$fail(peg$e26);
									}
								}
								if (s0 === peg$FAILED) {
									if (input.substr(peg$currPos, 4) === peg$c23) {
										s0 = peg$c23;
										peg$currPos += 4;
									} else {
										s0 = peg$FAILED;
										if (peg$silentFails === 0) {
											peg$fail(peg$e27);
										}
									}
									if (s0 === peg$FAILED) {
										if (input.substr(peg$currPos, 2) === peg$c24) {
											s0 = peg$c24;
											peg$currPos += 2;
										} else {
											s0 = peg$FAILED;
											if (peg$silentFails === 0) {
												peg$fail(peg$e28);
											}
										}
										if (s0 === peg$FAILED) {
											if (input.substr(peg$currPos, 3) === peg$c25) {
												s0 = peg$c25;
												peg$currPos += 3;
											} else {
												s0 = peg$FAILED;
												if (peg$silentFails === 0) {
													peg$fail(peg$e29);
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e20);
				}
			}

			return s0;
		}

		function peg$parsefwdarrowtoken() {
			var s0, s1;

			peg$silentFails++;
			if (input.substr(peg$currPos, 2) === peg$c26) {
				s0 = peg$c26;
				peg$currPos += 2;
			} else {
				s0 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e31);
				}
			}
			if (s0 === peg$FAILED) {
				if (input.substr(peg$currPos, 3) === peg$c27) {
					s0 = peg$c27;
					peg$currPos += 3;
				} else {
					s0 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$e32);
					}
				}
				if (s0 === peg$FAILED) {
					if (input.substr(peg$currPos, 2) === peg$c28) {
						s0 = peg$c28;
						peg$currPos += 2;
					} else {
						s0 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$e33);
						}
					}
					if (s0 === peg$FAILED) {
						if (input.substr(peg$currPos, 2) === peg$c29) {
							s0 = peg$c29;
							peg$currPos += 2;
						} else {
							s0 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$e34);
							}
						}
						if (s0 === peg$FAILED) {
							if (input.substr(peg$currPos, 2) === peg$c30) {
								s0 = peg$c30;
								peg$currPos += 2;
							} else {
								s0 = peg$FAILED;
								if (peg$silentFails === 0) {
									peg$fail(peg$e35);
								}
							}
							if (s0 === peg$FAILED) {
								s0 = input.substr(peg$currPos, 2);
								if (s0.toLowerCase() === peg$c31) {
									peg$currPos += 2;
								} else {
									s0 = peg$FAILED;
									if (peg$silentFails === 0) {
										peg$fail(peg$e36);
									}
								}
							}
						}
					}
				}
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e30);
				}
			}

			return s0;
		}

		function peg$parsebckarrowtoken() {
			var s0, s1;

			peg$silentFails++;
			if (input.substr(peg$currPos, 2) === peg$c32) {
				s0 = peg$c32;
				peg$currPos += 2;
			} else {
				s0 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e38);
				}
			}
			if (s0 === peg$FAILED) {
				if (input.substr(peg$currPos, 3) === peg$c33) {
					s0 = peg$c33;
					peg$currPos += 3;
				} else {
					s0 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$e39);
					}
				}
				if (s0 === peg$FAILED) {
					if (input.substr(peg$currPos, 2) === peg$c34) {
						s0 = peg$c34;
						peg$currPos += 2;
					} else {
						s0 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$e40);
						}
					}
					if (s0 === peg$FAILED) {
						if (input.substr(peg$currPos, 2) === peg$c35) {
							s0 = peg$c35;
							peg$currPos += 2;
						} else {
							s0 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$e41);
							}
						}
						if (s0 === peg$FAILED) {
							if (input.substr(peg$currPos, 2) === peg$c36) {
								s0 = peg$c36;
								peg$currPos += 2;
							} else {
								s0 = peg$FAILED;
								if (peg$silentFails === 0) {
									peg$fail(peg$e42);
								}
							}
							if (s0 === peg$FAILED) {
								s0 = input.substr(peg$currPos, 2);
								if (s0.toLowerCase() === peg$c37) {
									peg$currPos += 2;
								} else {
									s0 = peg$FAILED;
									if (peg$silentFails === 0) {
										peg$fail(peg$e43);
									}
								}
							}
						}
					}
				}
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e37);
				}
			}

			return s0;
		}

		function peg$parseboxtoken() {
			var s0, s1;

			peg$silentFails++;
			s0 = input.substr(peg$currPos, 4);
			if (s0.toLowerCase() === peg$c38) {
				peg$currPos += 4;
			} else {
				s0 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e45);
				}
			}
			if (s0 === peg$FAILED) {
				s0 = input.substr(peg$currPos, 4);
				if (s0.toLowerCase() === peg$c39) {
					peg$currPos += 4;
				} else {
					s0 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$e46);
					}
				}
				if (s0 === peg$FAILED) {
					s0 = input.substr(peg$currPos, 4);
					if (s0.toLowerCase() === peg$c40) {
						peg$currPos += 4;
					} else {
						s0 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$e47);
						}
					}
					if (s0 === peg$FAILED) {
						s0 = input.substr(peg$currPos, 3);
						if (s0.toLowerCase() === peg$c41) {
							peg$currPos += 3;
						} else {
							s0 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$e48);
							}
						}
					}
				}
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e44);
				}
			}

			return s0;
		}

		function peg$parsespanarctoken() {
			var s0, s1;

			peg$silentFails++;
			s0 = peg$currPos;
			s1 = input.substr(peg$currPos, 3);
			if (s1.toLowerCase() === peg$c42) {
				peg$currPos += 3;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e50);
				}
			}
			if (s1 === peg$FAILED) {
				s1 = input.substr(peg$currPos, 4);
				if (s1.toLowerCase() === peg$c43) {
					peg$currPos += 4;
				} else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$e51);
					}
				}
				if (s1 === peg$FAILED) {
					s1 = input.substr(peg$currPos, 3);
					if (s1.toLowerCase() === peg$c44) {
						peg$currPos += 3;
					} else {
						s1 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$e52);
						}
					}
					if (s1 === peg$FAILED) {
						s1 = input.substr(peg$currPos, 5);
						if (s1.toLowerCase() === peg$c45) {
							peg$currPos += 5;
						} else {
							s1 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$e53);
							}
						}
						if (s1 === peg$FAILED) {
							s1 = input.substr(peg$currPos, 3);
							if (s1.toLowerCase() === peg$c46) {
								peg$currPos += 3;
							} else {
								s1 = peg$FAILED;
								if (peg$silentFails === 0) {
									peg$fail(peg$e54);
								}
							}
							if (s1 === peg$FAILED) {
								s1 = input.substr(peg$currPos, 3);
								if (s1.toLowerCase() === peg$c47) {
									peg$currPos += 3;
								} else {
									s1 = peg$FAILED;
									if (peg$silentFails === 0) {
										peg$fail(peg$e55);
									}
								}
								if (s1 === peg$FAILED) {
									s1 = input.substr(peg$currPos, 6);
									if (s1.toLowerCase() === peg$c48) {
										peg$currPos += 6;
									} else {
										s1 = peg$FAILED;
										if (peg$silentFails === 0) {
											peg$fail(peg$e56);
										}
									}
									if (s1 === peg$FAILED) {
										s1 = input.substr(peg$currPos, 3);
										if (s1.toLowerCase() === peg$c49) {
											peg$currPos += 3;
										} else {
											s1 = peg$FAILED;
											if (peg$silentFails === 0) {
												peg$fail(peg$e57);
											}
										}
										if (s1 === peg$FAILED) {
											s1 = input.substr(peg$currPos, 8);
											if (s1.toLowerCase() === peg$c50) {
												peg$currPos += 8;
											} else {
												s1 = peg$FAILED;
												if (peg$silentFails === 0) {
													peg$fail(peg$e58);
												}
											}
											if (s1 === peg$FAILED) {
												s1 = input.substr(peg$currPos, 6);
												if (s1.toLowerCase() === peg$c51) {
													peg$currPos += 6;
												} else {
													s1 = peg$FAILED;
													if (peg$silentFails === 0) {
														peg$fail(peg$e59);
													}
												}
												if (s1 === peg$FAILED) {
													s1 = input.substr(peg$currPos, 8);
													if (s1.toLowerCase() === peg$c52) {
														peg$currPos += 8;
													} else {
														s1 = peg$FAILED;
														if (peg$silentFails === 0) {
															peg$fail(peg$e60);
														}
													}
													if (s1 === peg$FAILED) {
														s1 = input.substr(peg$currPos, 6);
														if (s1.toLowerCase() === peg$c53) {
															peg$currPos += 6;
														} else {
															s1 = peg$FAILED;
															if (peg$silentFails === 0) {
																peg$fail(peg$e61);
															}
														}
														if (s1 === peg$FAILED) {
															s1 = input.substr(peg$currPos, 4);
															if (s1.toLowerCase() === peg$c54) {
																peg$currPos += 4;
															} else {
																s1 = peg$FAILED;
																if (peg$silentFails === 0) {
																	peg$fail(peg$e62);
																}
															}
															if (s1 === peg$FAILED) {
																s1 = input.substr(peg$currPos, 3);
																if (s1.toLowerCase() === peg$c55) {
																	peg$currPos += 3;
																} else {
																	s1 = peg$FAILED;
																	if (peg$silentFails === 0) {
																		peg$fail(peg$e63);
																	}
																}
																if (s1 === peg$FAILED) {
																	s1 = input.substr(peg$currPos, 3);
																	if (s1.toLowerCase() === peg$c56) {
																		peg$currPos += 3;
																	} else {
																		s1 = peg$FAILED;
																		if (peg$silentFails === 0) {
																			peg$fail(peg$e64);
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$f34(s1);
			}
			s0 = s1;
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e49);
				}
			}

			return s0;
		}

		function peg$parsestring() {
			var s0;

			s0 = peg$parsequotedstring();
			if (s0 === peg$FAILED) {
				s0 = peg$parseunquotedstring();
			}

			return s0;
		}

		function peg$parsequotedstring() {
			var s0, s1, s2, s3;

			peg$silentFails++;
			s0 = peg$currPos;
			if (input.charCodeAt(peg$currPos) === 34) {
				s1 = peg$c57;
				peg$currPos++;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e66);
				}
			}
			if (s1 !== peg$FAILED) {
				s2 = peg$parsestringcontent();
				if (input.charCodeAt(peg$currPos) === 34) {
					s3 = peg$c57;
					peg$currPos++;
				} else {
					s3 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$e66);
					}
				}
				if (s3 !== peg$FAILED) {
					peg$savedPos = s0;
					s0 = peg$f35(s2);
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e65);
				}
			}

			return s0;
		}

		function peg$parsestringcontent() {
			var s0, s1, s2, s3;

			s0 = [];
			s1 = peg$currPos;
			s2 = peg$currPos;
			peg$silentFails++;
			if (input.charCodeAt(peg$currPos) === 34) {
				s3 = peg$c57;
				peg$currPos++;
			} else {
				s3 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e66);
				}
			}
			peg$silentFails--;
			if (s3 === peg$FAILED) {
				s2 = undefined;
			} else {
				peg$currPos = s2;
				s2 = peg$FAILED;
			}
			if (s2 !== peg$FAILED) {
				if (input.substr(peg$currPos, 2) === peg$c58) {
					s3 = peg$c58;
					peg$currPos += 2;
				} else {
					s3 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$e67);
					}
				}
				if (s3 === peg$FAILED) {
					if (input.length > peg$currPos) {
						s3 = input.charAt(peg$currPos);
						peg$currPos++;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$e68);
						}
					}
				}
				if (s3 !== peg$FAILED) {
					peg$savedPos = s1;
					s1 = peg$f36(s3);
				} else {
					peg$currPos = s1;
					s1 = peg$FAILED;
				}
			} else {
				peg$currPos = s1;
				s1 = peg$FAILED;
			}
			while (s1 !== peg$FAILED) {
				s0.push(s1);
				s1 = peg$currPos;
				s2 = peg$currPos;
				peg$silentFails++;
				if (input.charCodeAt(peg$currPos) === 34) {
					s3 = peg$c57;
					peg$currPos++;
				} else {
					s3 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$e66);
					}
				}
				peg$silentFails--;
				if (s3 === peg$FAILED) {
					s2 = undefined;
				} else {
					peg$currPos = s2;
					s2 = peg$FAILED;
				}
				if (s2 !== peg$FAILED) {
					if (input.substr(peg$currPos, 2) === peg$c58) {
						s3 = peg$c58;
						peg$currPos += 2;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$e67);
						}
					}
					if (s3 === peg$FAILED) {
						if (input.length > peg$currPos) {
							s3 = input.charAt(peg$currPos);
							peg$currPos++;
						} else {
							s3 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$e68);
							}
						}
					}
					if (s3 !== peg$FAILED) {
						peg$savedPos = s1;
						s1 = peg$f36(s3);
					} else {
						peg$currPos = s1;
						s1 = peg$FAILED;
					}
				} else {
					peg$currPos = s1;
					s1 = peg$FAILED;
				}
			}

			return s0;
		}

		function peg$parseunquotedstring() {
			var s0, s1;

			s0 = peg$currPos;
			s1 = peg$parsenonsep();
			peg$savedPos = s0;
			s1 = peg$f37(s1);
			s0 = s1;

			return s0;
		}

		function peg$parsenonsep() {
			var s0, s1, s2, s3;

			s0 = [];
			s1 = peg$currPos;
			s2 = peg$currPos;
			peg$silentFails++;
			s3 = input.charAt(peg$currPos);
			if (peg$r0.test(s3)) {
				peg$currPos++;
			} else {
				s3 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e69);
				}
			}
			peg$silentFails--;
			if (s3 === peg$FAILED) {
				s2 = undefined;
			} else {
				peg$currPos = s2;
				s2 = peg$FAILED;
			}
			if (s2 !== peg$FAILED) {
				if (input.length > peg$currPos) {
					s3 = input.charAt(peg$currPos);
					peg$currPos++;
				} else {
					s3 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$e68);
					}
				}
				if (s3 !== peg$FAILED) {
					peg$savedPos = s1;
					s1 = peg$f38(s3);
				} else {
					peg$currPos = s1;
					s1 = peg$FAILED;
				}
			} else {
				peg$currPos = s1;
				s1 = peg$FAILED;
			}
			while (s1 !== peg$FAILED) {
				s0.push(s1);
				s1 = peg$currPos;
				s2 = peg$currPos;
				peg$silentFails++;
				s3 = input.charAt(peg$currPos);
				if (peg$r0.test(s3)) {
					peg$currPos++;
				} else {
					s3 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$e69);
					}
				}
				peg$silentFails--;
				if (s3 === peg$FAILED) {
					s2 = undefined;
				} else {
					peg$currPos = s2;
					s2 = peg$FAILED;
				}
				if (s2 !== peg$FAILED) {
					if (input.length > peg$currPos) {
						s3 = input.charAt(peg$currPos);
						peg$currPos++;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$e68);
						}
					}
					if (s3 !== peg$FAILED) {
						peg$savedPos = s1;
						s1 = peg$f38(s3);
					} else {
						peg$currPos = s1;
						s1 = peg$FAILED;
					}
				} else {
					peg$currPos = s1;
					s1 = peg$FAILED;
				}
			}

			return s0;
		}

		function peg$parseidentifier() {
			var s0, s1, s2;

			peg$silentFails++;
			s0 = peg$currPos;
			s1 = [];
			s2 = input.charAt(peg$currPos);
			if (peg$r1.test(s2)) {
				peg$currPos++;
			} else {
				s2 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e71);
				}
			}
			if (s2 !== peg$FAILED) {
				while (s2 !== peg$FAILED) {
					s1.push(s2);
					s2 = input.charAt(peg$currPos);
					if (peg$r1.test(s2)) {
						peg$currPos++;
					} else {
						s2 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$e71);
						}
					}
				}
			} else {
				s1 = peg$FAILED;
			}
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$f39(s1);
			}
			s0 = s1;
			if (s0 === peg$FAILED) {
				s0 = peg$parsequotedstring();
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e70);
				}
			}

			return s0;
		}

		function peg$parsewhitespace() {
			var s0, s1;

			peg$silentFails++;
			s0 = peg$currPos;
			s1 = input.charAt(peg$currPos);
			if (peg$r2.test(s1)) {
				peg$currPos++;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e73);
				}
			}
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$f40(s1);
			}
			s0 = s1;
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e72);
				}
			}

			return s0;
		}

		function peg$parselineend() {
			var s0, s1;

			peg$silentFails++;
			s0 = peg$currPos;
			s1 = input.charAt(peg$currPos);
			if (peg$r3.test(s1)) {
				peg$currPos++;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e75);
				}
			}
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$f41(s1);
			}
			s0 = s1;
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e74);
				}
			}

			return s0;
		}

		function peg$parsemlcomstart() {
			var s0;

			if (input.substr(peg$currPos, 2) === peg$c59) {
				s0 = peg$c59;
				peg$currPos += 2;
			} else {
				s0 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e76);
				}
			}

			return s0;
		}

		function peg$parsemlcomend() {
			var s0;

			if (input.substr(peg$currPos, 2) === peg$c60) {
				s0 = peg$c60;
				peg$currPos += 2;
			} else {
				s0 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e77);
				}
			}

			return s0;
		}

		function peg$parsemlcomtok() {
			var s0, s1, s2;

			s0 = peg$currPos;
			s1 = peg$currPos;
			peg$silentFails++;
			if (input.substr(peg$currPos, 2) === peg$c60) {
				s2 = peg$c60;
				peg$currPos += 2;
			} else {
				s2 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e77);
				}
			}
			peg$silentFails--;
			if (s2 === peg$FAILED) {
				s1 = undefined;
			} else {
				peg$currPos = s1;
				s1 = peg$FAILED;
			}
			if (s1 !== peg$FAILED) {
				if (input.length > peg$currPos) {
					s2 = input.charAt(peg$currPos);
					peg$currPos++;
				} else {
					s2 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$e68);
					}
				}
				if (s2 !== peg$FAILED) {
					peg$savedPos = s0;
					s0 = peg$f42(s2);
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}

			return s0;
		}

		function peg$parsemlcomment() {
			var s0, s1, s2, s3;

			s0 = peg$currPos;
			s1 = peg$parsemlcomstart();
			if (s1 !== peg$FAILED) {
				s2 = [];
				s3 = peg$parsemlcomtok();
				while (s3 !== peg$FAILED) {
					s2.push(s3);
					s3 = peg$parsemlcomtok();
				}
				s3 = peg$parsemlcomend();
				if (s3 !== peg$FAILED) {
					peg$savedPos = s0;
					s0 = peg$f43(s1, s2, s3);
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}

			return s0;
		}

		function peg$parseslcomstart() {
			var s0;

			if (input.substr(peg$currPos, 2) === peg$c61) {
				s0 = peg$c61;
				peg$currPos += 2;
			} else {
				s0 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e78);
				}
			}
			if (s0 === peg$FAILED) {
				if (input.charCodeAt(peg$currPos) === 35) {
					s0 = peg$c62;
					peg$currPos++;
				} else {
					s0 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$e79);
					}
				}
			}

			return s0;
		}

		function peg$parseslcomtok() {
			var s0;

			s0 = input.charAt(peg$currPos);
			if (peg$r4.test(s0)) {
				peg$currPos++;
			} else {
				s0 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e80);
				}
			}

			return s0;
		}

		function peg$parseslcomment() {
			var s0, s1, s2, s3;

			s0 = peg$currPos;
			s1 = peg$parseslcomstart();
			if (s1 !== peg$FAILED) {
				s2 = [];
				s3 = peg$parseslcomtok();
				while (s3 !== peg$FAILED) {
					s2.push(s3);
					s3 = peg$parseslcomtok();
				}
				peg$savedPos = s0;
				s0 = peg$f44(s1, s2);
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}

			return s0;
		}

		function peg$parsecomment() {
			var s0, s1;

			peg$silentFails++;
			s0 = peg$parseslcomment();
			if (s0 === peg$FAILED) {
				s0 = peg$parsemlcomment();
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e81);
				}
			}

			return s0;
		}

		function peg$parse_() {
			var s0, s1;

			s0 = [];
			s1 = peg$parsewhitespace();
			if (s1 === peg$FAILED) {
				s1 = peg$parselineend();
				if (s1 === peg$FAILED) {
					s1 = peg$parsecomment();
				}
			}
			while (s1 !== peg$FAILED) {
				s0.push(s1);
				s1 = peg$parsewhitespace();
				if (s1 === peg$FAILED) {
					s1 = peg$parselineend();
					if (s1 === peg$FAILED) {
						s1 = peg$parsecomment();
					}
				}
			}

			return s0;
		}

		function peg$parsenumberlike() {
			var s0, s1;

			peg$silentFails++;
			s0 = peg$currPos;
			s1 = peg$parsenumberlikestring();
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$f45(s1);
			}
			s0 = s1;
			if (s0 === peg$FAILED) {
				s0 = peg$currPos;
				s1 = peg$parsenumber();
				if (s1 !== peg$FAILED) {
					peg$savedPos = s0;
					s1 = peg$f46(s1);
				}
				s0 = s1;
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e82);
				}
			}

			return s0;
		}

		function peg$parsenumberlikestring() {
			var s0, s1, s2, s3;

			s0 = peg$currPos;
			if (input.charCodeAt(peg$currPos) === 34) {
				s1 = peg$c57;
				peg$currPos++;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e66);
				}
			}
			if (s1 !== peg$FAILED) {
				s2 = peg$parsenumber();
				if (s2 !== peg$FAILED) {
					if (input.charCodeAt(peg$currPos) === 34) {
						s3 = peg$c57;
						peg$currPos++;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$e66);
						}
					}
					if (s3 !== peg$FAILED) {
						peg$savedPos = s0;
						s0 = peg$f47(s2);
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}

			return s0;
		}

		function peg$parsenumber() {
			var s0;

			s0 = peg$parsereal();
			if (s0 === peg$FAILED) {
				s0 = peg$parsecardinal();
			}

			return s0;
		}

		function peg$parsecardinal() {
			var s0, s1, s2;

			s0 = peg$currPos;
			s1 = [];
			s2 = input.charAt(peg$currPos);
			if (peg$r5.test(s2)) {
				peg$currPos++;
			} else {
				s2 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e83);
				}
			}
			if (s2 !== peg$FAILED) {
				while (s2 !== peg$FAILED) {
					s1.push(s2);
					s2 = input.charAt(peg$currPos);
					if (peg$r5.test(s2)) {
						peg$currPos++;
					} else {
						s2 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$e83);
						}
					}
				}
			} else {
				s1 = peg$FAILED;
			}
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$f48(s1);
			}
			s0 = s1;

			return s0;
		}

		function peg$parsereal() {
			var s0, s1, s2, s3, s4;

			s0 = peg$currPos;
			s1 = peg$currPos;
			s2 = peg$parsecardinal();
			if (s2 !== peg$FAILED) {
				if (input.charCodeAt(peg$currPos) === 46) {
					s3 = peg$c63;
					peg$currPos++;
				} else {
					s3 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$e84);
					}
				}
				if (s3 !== peg$FAILED) {
					s4 = peg$parsecardinal();
					if (s4 !== peg$FAILED) {
						s2 = [s2, s3, s4];
						s1 = s2;
					} else {
						peg$currPos = s1;
						s1 = peg$FAILED;
					}
				} else {
					peg$currPos = s1;
					s1 = peg$FAILED;
				}
			} else {
				peg$currPos = s1;
				s1 = peg$FAILED;
			}
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$f49(s1);
			}
			s0 = s1;

			return s0;
		}

		function peg$parsebooleanlike() {
			var s0, s1;

			peg$silentFails++;
			s0 = peg$currPos;
			s1 = peg$parsebooleanlikestring();
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$f50(s1);
			}
			s0 = s1;
			if (s0 === peg$FAILED) {
				s0 = peg$currPos;
				s1 = peg$parseboolean();
				if (s1 !== peg$FAILED) {
					peg$savedPos = s0;
					s1 = peg$f51(s1);
				}
				s0 = s1;
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e85);
				}
			}

			return s0;
		}

		function peg$parsebooleanlikestring() {
			var s0, s1, s2, s3;

			s0 = peg$currPos;
			if (input.charCodeAt(peg$currPos) === 34) {
				s1 = peg$c57;
				peg$currPos++;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e66);
				}
			}
			if (s1 !== peg$FAILED) {
				s2 = peg$parseboolean();
				if (s2 !== peg$FAILED) {
					if (input.charCodeAt(peg$currPos) === 34) {
						s3 = peg$c57;
						peg$currPos++;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$e66);
						}
					}
					if (s3 !== peg$FAILED) {
						peg$savedPos = s0;
						s0 = peg$f52(s2);
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}

			return s0;
		}

		function peg$parseboolean() {
			var s0;

			s0 = input.substr(peg$currPos, 4);
			if (s0.toLowerCase() === peg$c64) {
				peg$currPos += 4;
			} else {
				s0 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e86);
				}
			}
			if (s0 === peg$FAILED) {
				s0 = input.substr(peg$currPos, 5);
				if (s0.toLowerCase() === peg$c65) {
					peg$currPos += 5;
				} else {
					s0 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$e87);
					}
				}
				if (s0 === peg$FAILED) {
					s0 = input.substr(peg$currPos, 2);
					if (s0.toLowerCase() === peg$c66) {
						peg$currPos += 2;
					} else {
						s0 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$e88);
						}
					}
					if (s0 === peg$FAILED) {
						s0 = input.substr(peg$currPos, 3);
						if (s0.toLowerCase() === peg$c67) {
							peg$currPos += 3;
						} else {
							s0 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$e89);
							}
						}
						if (s0 === peg$FAILED) {
							s0 = input.charAt(peg$currPos);
							if (peg$r6.test(s0)) {
								peg$currPos++;
							} else {
								s0 = peg$FAILED;
								if (peg$silentFails === 0) {
									peg$fail(peg$e90);
								}
							}
						}
					}
				}
			}

			return s0;
		}

		function peg$parsesizelike() {
			var s0, s1;

			peg$silentFails++;
			s0 = peg$parsesizelikestring();
			if (s0 === peg$FAILED) {
				s0 = peg$parsesize();
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e91);
				}
			}

			return s0;
		}

		function peg$parsesizelikestring() {
			var s0, s1, s2, s3;

			s0 = peg$currPos;
			if (input.charCodeAt(peg$currPos) === 34) {
				s1 = peg$c57;
				peg$currPos++;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$e66);
				}
			}
			if (s1 !== peg$FAILED) {
				s2 = peg$parsesize();
				if (s2 !== peg$FAILED) {
					if (input.charCodeAt(peg$currPos) === 34) {
						s3 = peg$c57;
						peg$currPos++;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$e66);
						}
					}
					if (s3 !== peg$FAILED) {
						peg$savedPos = s0;
						s0 = peg$f53(s2);
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}

			return s0;
		}

		function peg$parsesize() {
			var s0, s1;

			s0 = peg$currPos;
			s1 = peg$parsenumber();
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$f54(s1);
			}
			s0 = s1;
			if (s0 === peg$FAILED) {
				s0 = peg$currPos;
				s1 = input.substr(peg$currPos, 4);
				if (s1.toLowerCase() === peg$c68) {
					peg$currPos += 4;
				} else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$e92);
					}
				}
				if (s1 !== peg$FAILED) {
					peg$savedPos = s0;
					s1 = peg$f55(s1);
				}
				s0 = s1;
			}

			return s0;
		}

		function entityNeedsExtracting(pEntities, pName, pEntityNamesToIgnore) {
			return !(
				parserHelpers.entityExists(pEntities, pName) ||
				pEntityNamesToIgnore[pName] === true
			);
		}

		function initEntity(pName) {
			return {
				name: pName,
			};
		}

		function extractUndeclaredEntities(
			pEntities,
			pArcLines,
			pEntityNamesToIgnore,
		) {
			if (!pEntityNamesToIgnore) {
				pEntityNamesToIgnore = {};
			}

			(pArcLines || []).forEach(function (pArcLine) {
				pArcLine.forEach(function (pArc) {
					if (
						entityNeedsExtracting(pEntities, pArc.from, pEntityNamesToIgnore)
					) {
						pEntities.push(initEntity(pArc.from));
					}
					// if the arc kind is arcspanning recurse into its arcs
					if (pArc.arcs) {
						pEntityNamesToIgnore[pArc.to] = true;
						Object.assign(
							pEntities,
							extractUndeclaredEntities(
								pEntities,
								pArc.arcs,
								pEntityNamesToIgnore,
							),
						);
						delete pEntityNamesToIgnore[pArc.to];
					}
					if (entityNeedsExtracting(pEntities, pArc.to, pEntityNamesToIgnore)) {
						pEntities.push(initEntity(pArc.to));
					}
				});
			});
			return pEntities;
		}

		peg$result = peg$startRuleFunction();

		if (options.peg$library) {
			return /** @type {any} */ ({
				peg$result,
				peg$currPos,
				peg$FAILED,
				peg$maxFailExpected,
				peg$maxFailPos,
			});
		}
		if (peg$result !== peg$FAILED && peg$currPos === input.length) {
			return peg$result;
		} else {
			if (peg$result !== peg$FAILED && peg$currPos < input.length) {
				peg$fail(peg$endExpectation());
			}

			throw peg$buildStructuredError(
				peg$maxFailExpected,
				peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
				peg$maxFailPos < input.length
					? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
					: peg$computeLocation(peg$maxFailPos, peg$maxFailPos),
			);
		}
	}

	return {
		StartRules: ["program"],
		SyntaxError: peg$SyntaxError,
		parse: peg$parse,
	};
});
