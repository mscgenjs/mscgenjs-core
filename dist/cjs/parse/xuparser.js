// Generated by Peggy 3.0.2.
//
// https://peggyjs.org/
(function(root, factory) {
  if (typeof define === "function" && define.amd) {
    define(["lodash/assign", "./parserHelpers"], factory);
  } else if (typeof module === "object" && module.exports) {
    module.exports = factory(require("lodash/assign"), require("./parserHelpers"));
  }
})(this, function(_assign, parserHelpers) {
  "use strict";

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { program: peg$parseprogram };
  var peg$startRuleFunction = peg$parseprogram;

  var peg$c0 = "{";
  var peg$c1 = "}";
  var peg$c2 = "msc";
  var peg$c3 = "xu";
  var peg$c4 = ",";
  var peg$c5 = ";";
  var peg$c6 = "hscale";
  var peg$c7 = "arcgradient";
  var peg$c8 = "=";
  var peg$c9 = "width";
  var peg$c10 = "wordwraparcs";
  var peg$c11 = "wordwrapentities";
  var peg$c12 = "wordwrapboxes";
  var peg$c13 = "watermark";
  var peg$c14 = "[";
  var peg$c15 = "]";
  var peg$c16 = "*";
  var peg$c17 = "|||";
  var peg$c18 = "...";
  var peg$c19 = "---";
  var peg$c20 = "--";
  var peg$c21 = "<->";
  var peg$c22 = "==";
  var peg$c23 = "<<=>>";
  var peg$c24 = "<=>";
  var peg$c25 = "..";
  var peg$c26 = "<<>>";
  var peg$c27 = "::";
  var peg$c28 = "<:>";
  var peg$c29 = "->";
  var peg$c30 = "=>>";
  var peg$c31 = "=>";
  var peg$c32 = ">>";
  var peg$c33 = ":>";
  var peg$c34 = "-x";
  var peg$c35 = "<-";
  var peg$c36 = "<<=";
  var peg$c37 = "<=";
  var peg$c38 = "<<";
  var peg$c39 = "<:";
  var peg$c40 = "x-";
  var peg$c41 = "note";
  var peg$c42 = "abox";
  var peg$c43 = "rbox";
  var peg$c44 = "box";
  var peg$c45 = "alt";
  var peg$c46 = "else";
  var peg$c47 = "opt";
  var peg$c48 = "break";
  var peg$c49 = "par";
  var peg$c50 = "seq";
  var peg$c51 = "strict";
  var peg$c52 = "neg";
  var peg$c53 = "critical";
  var peg$c54 = "ignore";
  var peg$c55 = "consider";
  var peg$c56 = "assert";
  var peg$c57 = "loop";
  var peg$c58 = "ref";
  var peg$c59 = "exc";
  var peg$c60 = "activate";
  var peg$c61 = "deactivate";
  var peg$c62 = "label";
  var peg$c63 = "idurl";
  var peg$c64 = "id";
  var peg$c65 = "url";
  var peg$c66 = "linecolor";
  var peg$c67 = "linecolour";
  var peg$c68 = "textcolor";
  var peg$c69 = "textcolour";
  var peg$c70 = "textbgcolor";
  var peg$c71 = "textbgcolour";
  var peg$c72 = "arclinecolor";
  var peg$c73 = "arclinecolour";
  var peg$c74 = "arctextcolor";
  var peg$c75 = "arctextcolour";
  var peg$c76 = "arctextbgcolor";
  var peg$c77 = "arctextbgcolour";
  var peg$c78 = "arcskip";
  var peg$c79 = "title";
  var peg$c80 = "activation";
  var peg$c81 = "\"";
  var peg$c82 = "\\\"";
  var peg$c83 = "/*";
  var peg$c84 = "*/";
  var peg$c85 = "//";
  var peg$c86 = "#";
  var peg$c87 = ".";
  var peg$c88 = "true";
  var peg$c89 = "false";
  var peg$c90 = "on";
  var peg$c91 = "off";
  var peg$c92 = "0";
  var peg$c93 = "1";
  var peg$c94 = "auto";

  var peg$r0 = /^[A-Za-z_0-9]/;
  var peg$r1 = /^[ \t]/;
  var peg$r2 = /^[\r\n]/;
  var peg$r3 = /^[^\r\n]/;
  var peg$r4 = /^[0-9]/;

  var peg$e0 = peg$literalExpectation("{", false);
  var peg$e1 = peg$literalExpectation("}", false);
  var peg$e2 = peg$literalExpectation("msc", true);
  var peg$e3 = peg$literalExpectation("xu", true);
  var peg$e4 = peg$literalExpectation(",", false);
  var peg$e5 = peg$literalExpectation(";", false);
  var peg$e6 = peg$otherExpectation("option");
  var peg$e7 = peg$literalExpectation("hscale", true);
  var peg$e8 = peg$literalExpectation("arcgradient", true);
  var peg$e9 = peg$literalExpectation("=", false);
  var peg$e10 = peg$literalExpectation("width", true);
  var peg$e11 = peg$literalExpectation("wordwraparcs", true);
  var peg$e12 = peg$literalExpectation("wordwrapentities", true);
  var peg$e13 = peg$literalExpectation("wordwrapboxes", true);
  var peg$e14 = peg$literalExpectation("watermark", true);
  var peg$e15 = peg$otherExpectation("entity");
  var peg$e16 = peg$literalExpectation("[", false);
  var peg$e17 = peg$literalExpectation("]", false);
  var peg$e18 = peg$literalExpectation("*", false);
  var peg$e19 = peg$otherExpectation("empty row");
  var peg$e20 = peg$literalExpectation("|||", false);
  var peg$e21 = peg$literalExpectation("...", false);
  var peg$e22 = peg$otherExpectation("---");
  var peg$e23 = peg$literalExpectation("---", false);
  var peg$e24 = peg$otherExpectation("bi-directional arrow");
  var peg$e25 = peg$literalExpectation("--", false);
  var peg$e26 = peg$literalExpectation("<->", false);
  var peg$e27 = peg$literalExpectation("==", false);
  var peg$e28 = peg$literalExpectation("<<=>>", false);
  var peg$e29 = peg$literalExpectation("<=>", false);
  var peg$e30 = peg$literalExpectation("..", false);
  var peg$e31 = peg$literalExpectation("<<>>", false);
  var peg$e32 = peg$literalExpectation("::", false);
  var peg$e33 = peg$literalExpectation("<:>", false);
  var peg$e34 = peg$otherExpectation("left to right arrow");
  var peg$e35 = peg$literalExpectation("->", false);
  var peg$e36 = peg$literalExpectation("=>>", false);
  var peg$e37 = peg$literalExpectation("=>", false);
  var peg$e38 = peg$literalExpectation(">>", false);
  var peg$e39 = peg$literalExpectation(":>", false);
  var peg$e40 = peg$literalExpectation("-x", true);
  var peg$e41 = peg$otherExpectation("right to left arrow");
  var peg$e42 = peg$literalExpectation("<-", false);
  var peg$e43 = peg$literalExpectation("<<=", false);
  var peg$e44 = peg$literalExpectation("<=", false);
  var peg$e45 = peg$literalExpectation("<<", false);
  var peg$e46 = peg$literalExpectation("<:", false);
  var peg$e47 = peg$literalExpectation("x-", true);
  var peg$e48 = peg$otherExpectation("box");
  var peg$e49 = peg$literalExpectation("note", true);
  var peg$e50 = peg$literalExpectation("abox", true);
  var peg$e51 = peg$literalExpectation("rbox", true);
  var peg$e52 = peg$literalExpectation("box", true);
  var peg$e53 = peg$otherExpectation("inline expression");
  var peg$e54 = peg$literalExpectation("alt", true);
  var peg$e55 = peg$literalExpectation("else", true);
  var peg$e56 = peg$literalExpectation("opt", true);
  var peg$e57 = peg$literalExpectation("break", true);
  var peg$e58 = peg$literalExpectation("par", true);
  var peg$e59 = peg$literalExpectation("seq", true);
  var peg$e60 = peg$literalExpectation("strict", true);
  var peg$e61 = peg$literalExpectation("neg", true);
  var peg$e62 = peg$literalExpectation("critical", true);
  var peg$e63 = peg$literalExpectation("ignore", true);
  var peg$e64 = peg$literalExpectation("consider", true);
  var peg$e65 = peg$literalExpectation("assert", true);
  var peg$e66 = peg$literalExpectation("loop", true);
  var peg$e67 = peg$literalExpectation("ref", true);
  var peg$e68 = peg$literalExpectation("exc", true);
  var peg$e69 = peg$otherExpectation("activate or deactivate");
  var peg$e70 = peg$literalExpectation("activate", true);
  var peg$e71 = peg$literalExpectation("deactivate", true);
  var peg$e72 = peg$otherExpectation("attribute name");
  var peg$e73 = peg$literalExpectation("label", true);
  var peg$e74 = peg$literalExpectation("idurl", true);
  var peg$e75 = peg$literalExpectation("id", true);
  var peg$e76 = peg$literalExpectation("url", true);
  var peg$e77 = peg$literalExpectation("linecolor", true);
  var peg$e78 = peg$literalExpectation("linecolour", true);
  var peg$e79 = peg$literalExpectation("textcolor", true);
  var peg$e80 = peg$literalExpectation("textcolour", true);
  var peg$e81 = peg$literalExpectation("textbgcolor", true);
  var peg$e82 = peg$literalExpectation("textbgcolour", true);
  var peg$e83 = peg$literalExpectation("arclinecolor", true);
  var peg$e84 = peg$literalExpectation("arclinecolour", true);
  var peg$e85 = peg$literalExpectation("arctextcolor", true);
  var peg$e86 = peg$literalExpectation("arctextcolour", true);
  var peg$e87 = peg$literalExpectation("arctextbgcolor", true);
  var peg$e88 = peg$literalExpectation("arctextbgcolour", true);
  var peg$e89 = peg$literalExpectation("arcskip", true);
  var peg$e90 = peg$literalExpectation("title", true);
  var peg$e91 = peg$literalExpectation("activation", true);
  var peg$e92 = peg$otherExpectation("double quoted string");
  var peg$e93 = peg$literalExpectation("\"", false);
  var peg$e94 = peg$literalExpectation("\\\"", false);
  var peg$e95 = peg$anyExpectation();
  var peg$e96 = peg$otherExpectation("identifier");
  var peg$e97 = peg$classExpectation([["A", "Z"], ["a", "z"], "_", ["0", "9"]], false, false);
  var peg$e98 = peg$otherExpectation("whitespace");
  var peg$e99 = peg$classExpectation([" ", "\t"], false, false);
  var peg$e100 = peg$otherExpectation("lineend");
  var peg$e101 = peg$classExpectation(["\r", "\n"], false, false);
  var peg$e102 = peg$literalExpectation("/*", false);
  var peg$e103 = peg$literalExpectation("*/", false);
  var peg$e104 = peg$literalExpectation("//", false);
  var peg$e105 = peg$literalExpectation("#", false);
  var peg$e106 = peg$classExpectation(["\r", "\n"], true, false);
  var peg$e107 = peg$otherExpectation("comment");
  var peg$e108 = peg$otherExpectation("number");
  var peg$e109 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e110 = peg$literalExpectation(".", false);
  var peg$e111 = peg$otherExpectation("boolean");
  var peg$e112 = peg$literalExpectation("true", true);
  var peg$e113 = peg$literalExpectation("false", true);
  var peg$e114 = peg$literalExpectation("on", true);
  var peg$e115 = peg$literalExpectation("off", true);
  var peg$e116 = peg$literalExpectation("0", false);
  var peg$e117 = peg$literalExpectation("1", false);
  var peg$e118 = peg$otherExpectation("size");
  var peg$e119 = peg$literalExpectation("auto", true);

  var peg$f0 = function(pre, declarations) {
        declarations.entities = declarations.entities || [];
        parserHelpers.checkForUndeclaredEntities(declarations.entities, declarations.arcs);

        declarations = _assign ({meta: parserHelpers.getMetaInfo(declarations.options, declarations.arcs)}, declarations);

        if (pre.length > 0) {
            declarations = _assign({precomment: pre}, declarations);
        }

        return declarations;
    };
  var peg$f1 = function(options, entities, arcs) {
          var lDeclarationList = {};
          if (options) {
              lDeclarationList.options = options;
          }
          if (entities) {
              lDeclarationList.entities = entities;
          }
          if (arcs) {
              lDeclarationList.arcs = arcs;
          }
          return lDeclarationList;
      };
  var peg$f2 = function(o) {return o};
  var peg$f3 = function(o) {return o};
  var peg$f4 = function(options) {
        // make the option array into an options object
        return options[0].concat(options[1]).reduce(_assign, {})
    };
  var peg$f5 = function(name, value) {
            return parserHelpers.nameValue2Option(name, value);
        };
  var peg$f6 = function(name, value) {
            return parserHelpers.nameValue2Option(name, value);
        };
  var peg$f7 = function(name, value) {
            return parserHelpers.nameValue2Option(name, parserHelpers.flattenBoolean(value));
        };
  var peg$f8 = function(name, value) {
            return parserHelpers.nameValue2Option(name, parserHelpers.flattenBoolean(value));
        };
  var peg$f9 = function(name, value) {
            return parserHelpers.nameValue2Option(name, parserHelpers.flattenBoolean(value));
        };
  var peg$f10 = function(name, value) {
            return parserHelpers.nameValue2Option(name, value);
        };
  var peg$f11 = function(e) {return e};
  var peg$f12 = function(e) {return e};
  var peg$f13 = function(el) {
      return el[0].concat(el[1]);
    };
  var peg$f14 = function(name, a) {return a};
  var peg$f15 = function(name, attrList) {
            return _assign ({name:name}, attrList);
        };
  var peg$f16 = function(name, a) {return a};
  var peg$f17 = function(name, attrList) {
          if (parserHelpers.isMscGenKeyword(name)){
            error("MscGen keywords aren't allowed as entity names (embed them in quotes if you need them)");
          }
          return _assign ({name:name}, attrList);
        };
  var peg$f18 = function(a) {return a};
  var peg$f19 = function(a) {return a};
  var peg$f20 = function(a) {return a};
  var peg$f21 = function(al) {
       return al[0].concat(al[1]);
    };
  var peg$f22 = function(a) {return a};
  var peg$f23 = function(a) {return a};
  var peg$f24 = function(a) {return a};
  var peg$f25 = function(a, al) {return al};
  var peg$f26 = function(a, al) {
      return _assign (a, al);
    };
  var peg$f27 = function(kind) {return {kind:kind}};
  var peg$f28 = function(kind) {return {kind:kind}};
  var peg$f29 = function(from, kind, to) {return {kind: kind, from:from, to:to}};
  var peg$f30 = function(kind, to) {return {kind:kind, from: "*", to:to}};
  var peg$f31 = function(from, kind) {return {kind:kind, from: from, to:"*"}};
  var peg$f32 = function(from, kind) {return {kind:kind, from: from, to:"*"}};
  var peg$f33 = function(from, kind, to, al) {return al};
  var peg$f34 = function(from, kind, to, al, arclist) {
            return _assign (
                {
                    kind     : kind,
                    from     : from,
                    to       : to,
                    arcs     : arclist
                },
                al
            );
        };
  var peg$f35 = function(kind) {return kind.toLowerCase()};
  var peg$f36 = function(kind) {
        return kind.toLowerCase()
    };
  var peg$f37 = function(a) {return a};
  var peg$f38 = function(a) {return a};
  var peg$f39 = function(attributes) {
        // transform the array of attributes into an object
        return attributes[0].concat(attributes[1]).reduce(_assign, {});
    };
  var peg$f40 = function(name) {
        return { activation: name.toLowerCase() === "activate"}
    };
  var peg$f41 = function(name, value) {
      var lAttribute = {};
      if (name.toLowerCase() === "activation"){
          lAttribute.activation = parserHelpers.flattenBoolean(value);
      } else {
        lAttribute[name.toLowerCase().replace("colour", "color")] = value;
      }
      return lAttribute
    };
  var peg$f42 = function(s) {return s.join("")};
  var peg$f43 = function(c) {return c};
  var peg$f44 = function(letters) {return letters.join("")};
  var peg$f45 = function(c) {return c};
  var peg$f46 = function(c) {return c};
  var peg$f47 = function(c) {return c};
  var peg$f48 = function(start, com, end) {
      return start + com.join("") + end
    };
  var peg$f49 = function(start, com) {
      return start + com.join("")
    };
  var peg$f50 = function(s) { return s; };
  var peg$f51 = function(i) { return i.toString(); };
  var peg$f52 = function(s) { return s.toString(); };
  var peg$f53 = function(digits) { return parseInt(digits.join(""), 10); };
  var peg$f54 = function(digits) { return parseFloat(digits.join("")); };
  var peg$f55 = function(bs) {return bs;};
  var peg$f56 = function(b) {return b.toString();};
  var peg$f57 = function(s) { return s; };
  var peg$f58 = function(s) { return s; };
  var peg$f59 = function(n) {return n.toString(); };
  var peg$f60 = function(s) {return s.toLowerCase(); };
  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = 0;
  var peg$maxFailExpected = [];
  var peg$silentFails = 0;

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseprogram() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parsestarttoken();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 123) {
        s4 = peg$c0;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parsedeclarationlist();
        s7 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 125) {
          s8 = peg$c1;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
        if (s8 !== peg$FAILED) {
          s9 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f0(s1, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestarttoken() {
    var s0;

    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c2) {
      s0 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c3) {
        s0 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
    }

    return s0;
  }

  function peg$parsedeclarationlist() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseoptionlist();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseentitylist();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$parsearclist();
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    peg$savedPos = s0;
    s0 = peg$f1(s1, s2, s3);

    return s0;
  }

  function peg$parseoptionlist() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$currPos;
    s4 = peg$parseoption();
    if (s4 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c4;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s3;
        s3 = peg$f2(s4);
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$parseoption();
      if (s4 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c4;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f2(s4);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
    }
    s3 = peg$currPos;
    s4 = peg$parseoption();
    if (s4 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 59) {
        s5 = peg$c5;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s3;
        s3 = peg$f3(s4);
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      s2 = [s2, s3];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f4(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseoption() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c6) {
      s2 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }
    if (s2 === peg$FAILED) {
      if (input.substr(peg$currPos, 11).toLowerCase() === peg$c7) {
        s2 = input.substr(peg$currPos, 11);
        peg$currPos += 11;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e8); }
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 61) {
        s4 = peg$c8;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e9); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parsenumberlike();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f5(s2, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c9) {
        s2 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e10); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 61) {
          s4 = peg$c8;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e9); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = peg$parsesizelike();
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f6(s2, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (input.substr(peg$currPos, 12).toLowerCase() === peg$c10) {
          s2 = input.substr(peg$currPos, 12);
          peg$currPos += 12;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 61) {
            s4 = peg$c8;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            s6 = peg$parsebooleanlike();
            if (s6 !== peg$FAILED) {
              s7 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f7(s2, s6);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();
          if (input.substr(peg$currPos, 16).toLowerCase() === peg$c11) {
            s2 = input.substr(peg$currPos, 16);
            peg$currPos += 16;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e12); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c8;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e9); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              s6 = peg$parsebooleanlike();
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();
                peg$savedPos = s0;
                s0 = peg$f8(s2, s6);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (input.substr(peg$currPos, 13).toLowerCase() === peg$c12) {
              s2 = input.substr(peg$currPos, 13);
              peg$currPos += 13;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e13); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 61) {
                s4 = peg$c8;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e9); }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                s6 = peg$parsebooleanlike();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  peg$savedPos = s0;
                  s0 = peg$f9(s2, s6);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parse_();
              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c13) {
                s2 = input.substr(peg$currPos, 9);
                peg$currPos += 9;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e14); }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 61) {
                  s4 = peg$c8;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e9); }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parse_();
                  s6 = peg$parsestring();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parse_();
                    peg$savedPos = s0;
                    s0 = peg$f10(s2, s6);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }

    return s0;
  }

  function peg$parseentitylist() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$currPos;
    s4 = peg$parseentity();
    if (s4 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c4;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s3;
        s3 = peg$f11(s4);
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$parseentity();
      if (s4 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c4;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f11(s4);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
    }
    s3 = peg$currPos;
    s4 = peg$parseentity();
    if (s4 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 59) {
        s5 = peg$c5;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s3;
        s3 = peg$f12(s4);
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      s2 = [s2, s3];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f13(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseentity() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parsestring();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s5 = peg$c14;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e16); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parseattributelist();
        if (s6 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s7 = peg$c15;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e17); }
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s4;
            s4 = peg$f14(s2, s6);
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f15(s2, s4);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      s2 = peg$parsequotelessidentifier();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s5 = peg$c14;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e16); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseattributelist();
          if (s6 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s7 = peg$c15;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e17); }
            }
            if (s7 !== peg$FAILED) {
              peg$savedPos = s4;
              s4 = peg$f16(s2, s6);
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f17(s2, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }

    return s0;
  }

  function peg$parsearclist() {
    var s0, s1, s2, s3, s4;

    s0 = [];
    s1 = peg$currPos;
    s2 = peg$parsearcline();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 59) {
        s4 = peg$c5;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s1;
        s1 = peg$f18(s2);
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$currPos;
        s2 = peg$parsearcline();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 59) {
            s4 = peg$c5;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e5); }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s1;
            s1 = peg$f18(s2);
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsearcline() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$currPos;
    s4 = peg$parsearc();
    if (s4 !== peg$FAILED) {
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s6 = peg$c4;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s6 !== peg$FAILED) {
        peg$savedPos = s3;
        s3 = peg$f19(s4);
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$parsearc();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c4;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f19(s4);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
    }
    s3 = peg$currPos;
    s4 = peg$parsearc();
    if (s4 !== peg$FAILED) {
      peg$savedPos = s3;
      s4 = peg$f20(s4);
    }
    s3 = s4;
    if (s3 !== peg$FAILED) {
      s2 = [s2, s3];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f21(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsearc() {
    var s0;

    s0 = peg$parseregulararc();
    if (s0 === peg$FAILED) {
      s0 = peg$parsespanarc();
    }

    return s0;
  }

  function peg$parseregulararc() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parsesinglearc();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s1;
      s2 = peg$f22(s2);
    }
    s1 = s2;
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      s2 = peg$parsedualarc();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s1;
        s2 = peg$f23(s2);
      }
      s1 = s2;
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parsecommentarc();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s1;
          s2 = peg$f24(s2);
        }
        s1 = s2;
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s3 = peg$c14;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e16); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseattributelist();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s5 = peg$c15;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e17); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s2;
            s2 = peg$f25(s1, s4);
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f26(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesinglearc() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parsesinglearctoken();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f27(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecommentarc() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parsecommenttoken();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f28(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedualarc() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseidentifier();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parsedualarctoken();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseidentifier();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f29(s2, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 42) {
        s2 = peg$c16;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e18); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parsebckarrowtoken();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = peg$parseidentifier();
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f30(s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          s4 = peg$parsefwdarrowtoken();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 42) {
              s6 = peg$c16;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e18); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f31(s2, s4);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();
          s2 = peg$parseidentifier();
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            s4 = peg$parsebidiarrowtoken();
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 42) {
                s6 = peg$c16;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e18); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();
                peg$savedPos = s0;
                s0 = peg$f32(s2, s4);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parsespanarc() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseidentifier();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parsespanarctoken();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseidentifier();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 91) {
            s9 = peg$c14;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e16); }
          }
          if (s9 !== peg$FAILED) {
            s10 = peg$parseattributelist();
            if (s10 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s11 = peg$c15;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e17); }
              }
              if (s11 !== peg$FAILED) {
                peg$savedPos = s8;
                s8 = peg$f33(s2, s4, s6, s10);
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
          } else {
            peg$currPos = s8;
            s8 = peg$FAILED;
          }
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          s9 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 123) {
            s10 = peg$c0;
            peg$currPos++;
          } else {
            s10 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e0); }
          }
          if (s10 !== peg$FAILED) {
            s11 = peg$parse_();
            s12 = peg$parsearclist();
            if (s12 === peg$FAILED) {
              s12 = null;
            }
            s13 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 125) {
              s14 = peg$c1;
              peg$currPos++;
            } else {
              s14 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
            if (s14 !== peg$FAILED) {
              s15 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f34(s2, s4, s6, s8, s12);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesinglearctoken() {
    var s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 3) === peg$c17) {
      s0 = peg$c17;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c18) {
        s0 = peg$c18;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e21); }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }

    return s0;
  }

  function peg$parsecommenttoken() {
    var s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 3) === peg$c19) {
      s0 = peg$c19;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }

    return s0;
  }

  function peg$parsedualarctoken() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsebidiarrowtoken();
    if (s1 === peg$FAILED) {
      s1 = peg$parsefwdarrowtoken();
      if (s1 === peg$FAILED) {
        s1 = peg$parsebckarrowtoken();
        if (s1 === peg$FAILED) {
          s1 = peg$parseboxtoken();
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f35(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsebidiarrowtoken() {
    var s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 2) === peg$c20) {
      s0 = peg$c20;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c21) {
        s0 = peg$c21;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e26); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c22) {
          s0 = peg$c22;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e27); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c23) {
            s0 = peg$c23;
            peg$currPos += 5;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e28); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c24) {
              s0 = peg$c24;
              peg$currPos += 3;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e29); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c25) {
                s0 = peg$c25;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e30); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c26) {
                  s0 = peg$c26;
                  peg$currPos += 4;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e31); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c27) {
                    s0 = peg$c27;
                    peg$currPos += 2;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e32); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 3) === peg$c28) {
                      s0 = peg$c28;
                      peg$currPos += 3;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e33); }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }

    return s0;
  }

  function peg$parsefwdarrowtoken() {
    var s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 2) === peg$c29) {
      s0 = peg$c29;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c30) {
        s0 = peg$c30;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e36); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c31) {
          s0 = peg$c31;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e37); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c32) {
            s0 = peg$c32;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e38); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c33) {
              s0 = peg$c33;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e39); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2).toLowerCase() === peg$c34) {
                s0 = input.substr(peg$currPos, 2);
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e40); }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }

    return s0;
  }

  function peg$parsebckarrowtoken() {
    var s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 2) === peg$c35) {
      s0 = peg$c35;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e42); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c36) {
        s0 = peg$c36;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e43); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c37) {
          s0 = peg$c37;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e44); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c38) {
            s0 = peg$c38;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e45); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c39) {
              s0 = peg$c39;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e46); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2).toLowerCase() === peg$c40) {
                s0 = input.substr(peg$currPos, 2);
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e47); }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e41); }
    }

    return s0;
  }

  function peg$parseboxtoken() {
    var s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c41) {
      s0 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e49); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c42) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e50); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c43) {
          s0 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e51); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c44) {
            s0 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e52); }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e48); }
    }

    return s0;
  }

  function peg$parsespanarctoken() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c45) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e54); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c46) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e55); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c47) {
          s1 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e56); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c48) {
            s1 = input.substr(peg$currPos, 5);
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e57); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c49) {
              s1 = input.substr(peg$currPos, 3);
              peg$currPos += 3;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e58); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c50) {
                s1 = input.substr(peg$currPos, 3);
                peg$currPos += 3;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e59); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 6).toLowerCase() === peg$c51) {
                  s1 = input.substr(peg$currPos, 6);
                  peg$currPos += 6;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e60); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 3).toLowerCase() === peg$c52) {
                    s1 = input.substr(peg$currPos, 3);
                    peg$currPos += 3;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e61); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c53) {
                      s1 = input.substr(peg$currPos, 8);
                      peg$currPos += 8;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e62); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c54) {
                        s1 = input.substr(peg$currPos, 6);
                        peg$currPos += 6;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e63); }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c55) {
                          s1 = input.substr(peg$currPos, 8);
                          peg$currPos += 8;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e64); }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c56) {
                            s1 = input.substr(peg$currPos, 6);
                            peg$currPos += 6;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e65); }
                          }
                          if (s1 === peg$FAILED) {
                            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c57) {
                              s1 = input.substr(peg$currPos, 4);
                              peg$currPos += 4;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e66); }
                            }
                            if (s1 === peg$FAILED) {
                              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c58) {
                                s1 = input.substr(peg$currPos, 3);
                                peg$currPos += 3;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e67); }
                              }
                              if (s1 === peg$FAILED) {
                                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c59) {
                                  s1 = input.substr(peg$currPos, 3);
                                  peg$currPos += 3;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e68); }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f36(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e53); }
    }

    return s0;
  }

  function peg$parseattributelist() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$currPos;
    s4 = peg$parseattribute();
    if (s4 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c4;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s3;
        s3 = peg$f37(s4);
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$parseattribute();
      if (s4 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c4;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f37(s4);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
    }
    s3 = peg$currPos;
    s4 = peg$parseattribute();
    if (s4 !== peg$FAILED) {
      peg$savedPos = s3;
      s4 = peg$f38(s4);
    }
    s3 = s4;
    if (s3 !== peg$FAILED) {
      s2 = [s2, s3];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f39(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseattribute() {
    var s0;

    s0 = peg$parsenamevalueattribute();
    if (s0 === peg$FAILED) {
      s0 = peg$parsevalueonlyattribute();
    }

    return s0;
  }

  function peg$parsevalueonlyattribute() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c60) {
      s2 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e70); }
    }
    if (s2 === peg$FAILED) {
      if (input.substr(peg$currPos, 10).toLowerCase() === peg$c61) {
        s2 = input.substr(peg$currPos, 10);
        peg$currPos += 10;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e71); }
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f40(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e69); }
    }

    return s0;
  }

  function peg$parsenamevalueattribute() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseattributename();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 61) {
        s4 = peg$c8;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e9); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseidentifier();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f41(s2, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseattributename() {
    var s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c62) {
      s0 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e73); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c63) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e74); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c64) {
          s0 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e75); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c65) {
            s0 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e76); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 9).toLowerCase() === peg$c66) {
              s0 = input.substr(peg$currPos, 9);
              peg$currPos += 9;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e77); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 10).toLowerCase() === peg$c67) {
                s0 = input.substr(peg$currPos, 10);
                peg$currPos += 10;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e78); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 9).toLowerCase() === peg$c68) {
                  s0 = input.substr(peg$currPos, 9);
                  peg$currPos += 9;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e79); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 10).toLowerCase() === peg$c69) {
                    s0 = input.substr(peg$currPos, 10);
                    peg$currPos += 10;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e80); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c70) {
                      s0 = input.substr(peg$currPos, 11);
                      peg$currPos += 11;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e81); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 12).toLowerCase() === peg$c71) {
                        s0 = input.substr(peg$currPos, 12);
                        peg$currPos += 12;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e82); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 12).toLowerCase() === peg$c72) {
                          s0 = input.substr(peg$currPos, 12);
                          peg$currPos += 12;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e83); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 13).toLowerCase() === peg$c73) {
                            s0 = input.substr(peg$currPos, 13);
                            peg$currPos += 13;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e84); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 12).toLowerCase() === peg$c74) {
                              s0 = input.substr(peg$currPos, 12);
                              peg$currPos += 12;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e85); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 13).toLowerCase() === peg$c75) {
                                s0 = input.substr(peg$currPos, 13);
                                peg$currPos += 13;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e86); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 14).toLowerCase() === peg$c76) {
                                  s0 = input.substr(peg$currPos, 14);
                                  peg$currPos += 14;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e87); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 15).toLowerCase() === peg$c77) {
                                    s0 = input.substr(peg$currPos, 15);
                                    peg$currPos += 15;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e88); }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c78) {
                                      s0 = input.substr(peg$currPos, 7);
                                      peg$currPos += 7;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e89); }
                                    }
                                    if (s0 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c79) {
                                        s0 = input.substr(peg$currPos, 5);
                                        peg$currPos += 5;
                                      } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e90); }
                                      }
                                      if (s0 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c80) {
                                          s0 = input.substr(peg$currPos, 10);
                                          peg$currPos += 10;
                                        } else {
                                          s0 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$e91); }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e72); }
    }

    return s0;
  }

  function peg$parsestring() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c81;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e93); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsestringcontent();
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c81;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e93); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f42(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e92); }
    }

    return s0;
  }

  function peg$parsestringcontent() {
    var s0, s1, s2, s3;

    s0 = [];
    s1 = peg$currPos;
    s2 = peg$currPos;
    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 34) {
      s3 = peg$c81;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e93); }
    }
    peg$silentFails--;
    if (s3 === peg$FAILED) {
      s2 = undefined;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c82) {
        s3 = peg$c82;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e94); }
      }
      if (s3 === peg$FAILED) {
        if (input.length > peg$currPos) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e95); }
        }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s1;
        s1 = peg$f43(s3);
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$currPos;
      s2 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c81;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e93); }
      }
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c82) {
          s3 = peg$c82;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e94); }
        }
        if (s3 === peg$FAILED) {
          if (input.length > peg$currPos) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e95); }
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s1;
          s1 = peg$f43(s3);
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseidentifier() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsequotelessidentifier();
    if (s0 === peg$FAILED) {
      s0 = peg$parsestring();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e96); }
    }

    return s0;
  }

  function peg$parsequotelessidentifier() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e97); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e97); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f44(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsewhitespace() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$r1.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e99); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f45(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e98); }
    }

    return s0;
  }

  function peg$parselineend() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$r2.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e101); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f46(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e100); }
    }

    return s0;
  }

  function peg$parsemlcomstart() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c83) {
      s0 = peg$c83;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e102); }
    }

    return s0;
  }

  function peg$parsemlcomend() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c84) {
      s0 = peg$c84;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e103); }
    }

    return s0;
  }

  function peg$parsemlcomtok() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    if (input.substr(peg$currPos, 2) === peg$c84) {
      s2 = peg$c84;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e103); }
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e95); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f47(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemlcomment() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsemlcomstart();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsemlcomtok();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsemlcomtok();
      }
      s3 = peg$parsemlcomend();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f48(s1, s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseslcomstart() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c85) {
      s0 = peg$c85;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e104); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 35) {
        s0 = peg$c86;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e105); }
      }
    }

    return s0;
  }

  function peg$parseslcomtok() {
    var s0;

    if (peg$r3.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e106); }
    }

    return s0;
  }

  function peg$parseslcomment() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseslcomstart();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseslcomtok();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseslcomtok();
      }
      peg$savedPos = s0;
      s0 = peg$f49(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecomment() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseslcomment();
    if (s0 === peg$FAILED) {
      s0 = peg$parsemlcomment();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e107); }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    s0 = [];
    s1 = peg$parsewhitespace();
    if (s1 === peg$FAILED) {
      s1 = peg$parselineend();
      if (s1 === peg$FAILED) {
        s1 = peg$parsecomment();
      }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parsewhitespace();
      if (s1 === peg$FAILED) {
        s1 = peg$parselineend();
        if (s1 === peg$FAILED) {
          s1 = peg$parsecomment();
        }
      }
    }

    return s0;
  }

  function peg$parsenumberlike() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsenumberlikestring();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f50(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsenumber();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f51(s1);
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e108); }
    }

    return s0;
  }

  function peg$parsenumberlikestring() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c81;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e93); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenumber();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s3 = peg$c81;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e93); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f52(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenumber() {
    var s0;

    s0 = peg$parsereal();
    if (s0 === peg$FAILED) {
      s0 = peg$parsecardinal();
    }

    return s0;
  }

  function peg$parsecardinal() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$r4.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e109); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$r4.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e109); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f53(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsereal() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parsecardinal();
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s3 = peg$c87;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e110); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parsecardinal();
        if (s4 !== peg$FAILED) {
          s2 = [s2, s3, s4];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f54(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsebooleanlike() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsebooleanlikestring();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f55(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseboolean();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f56(s1);
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e111); }
    }

    return s0;
  }

  function peg$parsebooleanlikestring() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c81;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e93); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseboolean();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s3 = peg$c81;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e93); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f57(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseboolean() {
    var s0;

    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c88) {
      s0 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e112); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c89) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e113); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c90) {
          s0 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e114); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c91) {
            s0 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e115); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 48) {
              s0 = peg$c92;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e116); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 49) {
                s0 = peg$c93;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e117); }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsesizelike() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsesizelikestring();
    if (s0 === peg$FAILED) {
      s0 = peg$parsesize();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e118); }
    }

    return s0;
  }

  function peg$parsesizelikestring() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c81;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e93); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsesize();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s3 = peg$c81;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e93); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f58(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesize() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsenumber();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f59(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c94) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e119); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f60(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

  return {
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  };
});
